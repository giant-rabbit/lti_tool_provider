<?php

/**
 * @file
 * LTI Tool Provider Attributes hook implementations and support functions.
 */

use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\Field\FieldDefinitionInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 * @param $route_name
 * @return string|null
 */
function lti_tool_provider_attributes_help($route_name)
{
    switch ($route_name) {
        case 'help.page.lti_tool_provider_attributes':
            $output = '<p>' . t('LTI Tool Provider Attributes Mapping') . '</p>';

            return $output;
    }
    return null;
}

/**
 * Implements hook_lti_tool_provider_authenticated().
 * @param User $user
 * @param array $context
 */
function lti_tool_provider_attributes_lti_tool_provider_authenticated(User $user, array $context)
{
    $user_attributes = [];

    // Don't alter the ltiuser as this isn't a unique account.
    if ($user->getUsername() === 'ltiuser') {
        return;
    }

    $userFieldDefinitions = Drupal::service('entity_field.manager')->getFieldDefinitions('user', 'user');

    /* @var $field FieldDefinitionInterface */
    foreach ($userFieldDefinitions as $key => $field) {
        $type = $field->getType();
        if ($type === 'string') {
            $user_attributes[$key] = t('@label (@name)', ['@label' => $field->getLabel(), '@name' => $key]);
        }
    }

    $mapped_attributes = Drupal::service('config.factory')->getEditable('lti_tool_provider_attributes.settings')->get('mapped_attributes');
    foreach ($mapped_attributes as $key => $user_attribute) {
        $lti_attribute = $context[$key];
        if (isset($user_attributes[$user_attribute]) && !empty($lti_attribute)) {
            $user->set($user_attribute, $lti_attribute);
        }
    }

    try {
        $user->save();
    }
    catch (EntityStorageException $e) {
        Drupal::logger('lti_tool_provider')->error(
            'Error saving LTI user attributes.'
        );
    }
}
