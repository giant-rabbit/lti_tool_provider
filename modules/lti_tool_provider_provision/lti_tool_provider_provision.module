<?php

/**
 * @file
 * LTI Tool Provider Provision hook implementations and support functions.
 */

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\ContentEntityBase;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\lti_tool_provider_provision\Entity\LtiToolProviderProvision;

/**
 * Implements hook_lti_tool_provider_authenticated().
 * @param string $destination
 * @param array $context
 */
function lti_tool_provider_provision_lti_tool_provider_launch_redirect_alter(string &$destination, array &$context)
{
    $settings = Drupal::config('lti_tool_provider_provision.settings');
    $entityType = $settings->get('entity_type');
    $entityBundle = $settings->get('entity_bundle');
    $entityDefaults = $settings->get('entity_defaults');

    if ($entityType && $entityBundle && isset($context['consumer_id']) && !empty($context['consumer_id']) && isset($context['context_id']) && !empty($context['context_id']) && isset($context['resource_link_id']) && !empty($context['resource_link_id'])) {
        try {
            if ($entity = lti_tool_provider_provision_provision_entity($entityType, $entityBundle, $entityDefaults, $context)) {
                if ($settings->get('entity_redirect')) {
                    $destination = $entity->toUrl()->toString();
                }
                Drupal::moduleHandler()->invokeAll('lti_tool_provider_provision_finished', [$entity, $context]);
            }
        }
        catch (Exception $e) {
            Drupal::logger('lti_tool_provider_provision')->error($e->getMessage());
        }
    }
}

/**
 * @param string $entityType
 * @param string $entityBundle
 * @param array $entityDefaults
 * @param array $context
 * @return EntityInterface
 * @throws EntityStorageException
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function lti_tool_provider_provision_provision_entity(
    string $entityType,
    string $entityBundle,
    array $entityDefaults,
    array $context
): EntityInterface {
    $entityTypeManager = Drupal::entityTypeManager();

    $provision = lti_tool_provider_provision_get_provision_from_context($context);
    if ($provision && $provision instanceof LtiToolProviderProvision) {
        $entity = $entityTypeManager->getStorage($provision->get('provision_type')->value)->load($provision->get('provision_id')->value);
        if (!$entity) {
            $provision->delete();
        }
        else {
            return $entity;
        }
    }

    $bundleType = $entityTypeManager->getDefinition($entityType)->getKey('bundle');
    $entity = $entityTypeManager->getStorage($entityType)->create([$bundleType => $entityBundle]);
    if ($entityDefaults) {
        foreach ($entityDefaults as $name => $entityDefault) {
            if ($entity instanceof ContentEntityBase && isset($context[$entityDefault]) && !empty($context[$entityDefault])) {
                $entity->set($name, $context[$entityDefault]);
            }
        }
    }

    Drupal::moduleHandler()->alter('lti_tool_provider_provision', $entity, $context);
    $entity->save();

    $provision = LtiToolProviderProvision::create();
    $provision->set('consumer_id', $context['consumer_id']);
    $provision->set('context_id', $context['context_id']);
    $provision->set('context_label', $context['context_label']);
    $provision->set('context_title', $context['context_title']);
    $provision->set('resource_link_id', $context['resource_link_id']);
    $provision->set('resource_link_title', $context['resource_link_title']);
    $provision->set('provision_type', $entityType);
    $provision->set('provision_bundle', $entityBundle);
    $provision->set('provision_id', $entity->id());
    $provision->save();

    return $entity;
}

/**
 * @param $context
 * @return bool|EntityInterface
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function lti_tool_provider_provision_get_provision_from_context($context)
{
    $provision = Drupal::entityTypeManager()->getStorage('lti_tool_provider_provision')
        ->loadByProperties(
            [
                'consumer_id' => $context['consumer_id'],
                'context_id' => $context['context_id'],
                'resource_link_id' => $context['resource_link_id'],
            ]
        );


    if (count($provision)) {
        return reset($provision);
    }

    return false;
}

/**
 * @param EntityInterface $entity
 * @return bool|EntityInterface
 * @throws InvalidPluginDefinitionException
 * @throws PluginNotFoundException
 */
function lti_tool_provider_provision_get_provision(EntityInterface $entity)
{
    $provision = Drupal::entityTypeManager()->getStorage('lti_tool_provider_provision')
        ->loadByProperties(
            [
                'provision_type' => $entity->getEntityTypeId(),
                'provision_bundle' => $entity->bundle(),
                'provision_id' => $entity->id(),
            ]
        );

    if (count($provision)) {
        return reset($provision);
    }

    return false;
}

/**
 * Implements hook_entity_predelete().
 * @param EntityInterface $entity
 * @throws EntityStorageException
 */
function lti_tool_provider_provision_entity_predelete(EntityInterface $entity)
{
    try {
        $provision = lti_tool_provider_provision_get_provision($entity);
    }
    catch (Exception $e) {
        return;
    }

    if ($provision && $provision instanceof LtiToolProviderProvision) {
        $provision->delete();
    }
}
