<?php

/**
 * @file
 * LTI Tool Provider Roles hook implementations and support functions.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\user\Entity\User;

/**
 * Implements hook_help().
 */
function lti_tool_provider_roles_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.lti_tool_provider_roles':
      $output = '<p>' . t('Provides role mapping for the LTI Tool Provider module.') . '</p>';
      return $output;
  }
}

/**
 * Implements hook_lti_tool_provider_authenticated().
 */
function lti_tool_provider_roles_lti_tool_provider_authenticated(User $user, array $context) {
  $user_roles = user_roles(TRUE, NULL);
  $lti_roles = parse_roles($context['roles']);

  // Don't alter the ltiuser as this isn't a unique account.
  if ($user->getUsername() === 'ltiuser') {
    return;
  }

  $mapped_roles = \Drupal::service('config.factory')->getEditable('lti_tool_provider_roles.settings')->get('mapped_roles');
  foreach ($mapped_roles as $lti_role => $user_role) {
    if (array_key_exists($user_role, $user_roles)) {
      if (in_array($lti_role, $lti_roles)) {
        $user->addRole($user_role);
      }
      else {
        $user->removeRole($user_role);
      }
    }
  }

  $user->save();
}

/**
 * Get an array of fully qualified LTI user roles.
 *
 * @param mixed $roles
 *   Comma-separated list of roles or array of roles.
 *
 * @return array
 *   An array of roles
 */
function parse_roles($roles) {
  $parsedRoles = [];

  if (!is_array($roles)) {
    $roles = explode(',', $roles);
  }

  foreach ($roles as $role) {
    $role = trim($role);
    if (!empty($role)) {
      if (substr($role, 0, 4) !== 'urn:') {
        $role = 'urn:lti:role:ims/lis/' . $role;
      }
      $parsedRoles[] = $role;
    }
  }

  return $parsedRoles;
}
