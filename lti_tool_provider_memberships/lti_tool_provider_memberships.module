<?php
/**
 * @file
 * lti_tool_provider_memberships hook implementations and support functions.
 */

/**
 * Implements hook_menu().
 */
function lti_tool_provider_memberships_menu() {
  $items = array();
  $items['lti-tool-provider/memberships'] = array(
    'title' => 'LTI Memberships',
    'description' => 'Administer LTI Tool Provider Memberships.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lti_tool_provider_memberships_form'),
    'access callback' => 'lti_tool_provider_context_access',
    'access arguments' => array('populate lti memberships'),
    'menu_name' => 'navigation',
    //    'file' => 'lti_tool_provider_memberships.admin.inc',
    'weight' => -4,
  );
  $items['admin/config/lti-tool-provider/memberships-groups'] = array(
    'title' => 'Memberships Groups',
    'description' => 'Configure LTI Memberships groups.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lti_tool_provider_memberships_subgroup_mapping'),
    'access arguments' => array('administer lti_tool_provider module'),
    'file' => 'lti_tool_provider_memberships.admin.inc',
    'weight' => -3,
  );
  return $items;
}

/**
 * Implement hook_permission().
 */
function lti_tool_provider_memberships_permission() {
  $items = array();
  $items['populate lti memberships'] = array(
    'title' => t('Populate LTI Memberships'),
    'description' => t("Permission to populate a groups' membership (including creating necessary user accounts) from a consumer's memberships service."),
  );
  return $items;
}

/**
 * Save a memberships entity.
 *
 * @param object $entity
 *   The memberships entity to be saved.
 */
function lti_tool_provider_memberships_save(&$entity) {
  return entity_get_controller('lti_tool_provider_memberships')->save($entity);
}

/**
 * Delete a memberships entity.
 *
 * @param object $entity
 *   The memberships entity to be deleted.
 */
function lti_tool_provider_memberships_delete($entity) {
  entity_get_controller('lti_tool_provider_memberships')->delete($entity);
}

/**
 * Delete memberships entities.
 *
 * @param array $entities
 *   The memberships entities to be deleted.
 */
function lti_tool_provider_memberships_delete_multiple($entities) {
  entity_get_controller('lti_tool_provider_memberships')->delete_multiple($entities);
}

/**
 * Load a memberships entity from an id.
 *
 * @param integer $id
 *   The id of the requested memberships entity.
 * @param boolean $reset
 *   Causes internal cache to be reset.
 *
 * @return boolean:object
 *   The requested entity or FALSE.
 */
function lti_tool_provider_memberships_load($id = FALSE, $reset = FALSE) {
  $obj = lti_tool_provider_memberships_load_multiple($id, $reset);
  return $obj ? reset($obj) : FALSE;
}

/**
 * Load memberships entities from an array of ids.
 *
 * @param array $ids
 *   An array of ids or if NULL
 * @param array $conditions
 *   An array of conditions on the query.
 * @param boolean $reset
 *   Causes internal cache to be reset.
 *
 * @return array
 *   An array of memberships entities or an empty array.
 */
function lti_tool_provider_memberships_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('lti_tool_provider_memberships', $ids, $conditions, $reset);
}

/**
 * Implements hook_entity_info().
 */
function lti_tool_provider_memberships_entity_info() {
  $return = array(
    'lti_tool_provider_memberships' => array(
      'label' => t('LTI Memberships'),
      'controller class' => 'LTIToolProviderMembershipsEntityController',
      'base table' => 'lti_tool_provider_memberships',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'lti_tool_provider_memberships_id'
      ),
      'static cache' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE
        )
      )
    ),
    'lti_tool_provider_memberships_context' => array(
      'label' => t('LTI Memberships Context'),
      'controller class' => 'LTIToolProviderMembershipsContextEntityController',
      'base table' => 'lti_tool_provider_memberships_context',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'lti_tool_provider_memberships_context_id'
      ),
      'static cache' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE
        )
      )
    )
  );
  return $return;
}

/**
 * Memberships admin form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   The form array.
 */
function lti_tool_provider_memberships_form($form, &$form_state) {
  $form = array(
    '#submit' => array('lti_tool_provider_memberships_form_submit'),
    '#validate' => array('lti_tool_provider_memberships_form_validate'),
  );
  $consumer = lti_tool_provider_get_consumer_by_key($_SESSION['lti_tool_provider_context_info']['oauth_consumer_key']);
  $fetch_new_data = isset($form_state['storage']['fetch_xml_btn']) ? TRUE : FALSE;
  $member_data = lti_tool_provider_memberships_get_memberships($fetch_new_data);
  $memberships_context = lti_tool_provider_memberships_get_memberships_context();
  $fid = $memberships_context->lti_tool_provider_memberships_context_file_id;
  if ($fid != 0) {
    $file = file_load($fid);
    $time_retrieved = format_date($file->timestamp);
  }
  else {
    $time_retrieved = 'Never Retrieved';
  }
  $form['members'] = array(
    '#prefix' => '<div id="membership-table">',
    '#suffix' => '</div>',
  );
  $form['members']['title'] = array(
    '#type' => 'item',
    '#markup' => t('Memberships for Consumer: <b>@consumer</b>, Context: <b>@context</b>, Retrieved on: <b>@date</b>', array('@consumer' => $consumer->lti_tool_provider_consumer_consumer,
      '@context' => $_SESSION['lti_tool_provider_context_info']['context_id'], '@date' => $time_retrieved)),
  );
  $form['members']['fetch_xml_btn']= array(
    '#type' => 'submit',
    '#value' => t('Refresh memberships'),
    '#ajax' => array(
      'callback' => 'lti_tool_provider_memberships_form_callback',
      'wrapper' => 'membership-table',
      'method' => 'replace',
      'effect' => 'fade',
    )
  );
  $new_members = lti_tool_provider_memberships_get_new_memberships($member_data);
  if (!empty($new_members)) {
    $form['members']['new_members']['description'] = array(
      '#type' => 'item',
      '#title' => t('New LTI Memberships'),
      '#markup' => t(count($new_members) . ' new member(s)'),
    );
    $new_members_header = array(
      'User ID' => t('User ID'),
      'person_name_full' => t('Name'),
      'Roles' => t('Roles'),
    );
    if (variable_get('lti_tool_provider_memberships_subgroups')) {
      $new_members_header['Groups'] = t('Groups');
    }
    $new_members_rows = array();
    foreach ($new_members as $new_member) {
      $new_members_rows[$new_member['user_id']] = array(
        'User ID' => $new_member['user_id'],
        'Roles' => $new_member['roles'],
        'person_sourcedid' => $new_member['person_sourcedid'],
        'person_contact_email_primary' => $new_member['person_contact_email_primary'],
        'person_name_given' => $new_member['person_name_given'],
        'person_name_family' => $new_member['person_name_family'],
        'person_name_full' => $new_member['person_name_full'],
      );
      if (variable_get('lti_tool_provider_memberships_subgroups')) {
        $groups = '';
        if (isset($new_member['groups'])) {
          foreach ($new_member['groups'] as $group) {
            $groups .= $group['title'] . ' ';
          }
          $new_members_rows[$new_member['user_id']]['groups'] = $new_member['groups'];
        }
        else {
          $new_members_rows[$new_member['user_id']]['groups'] = array();
        }
        $new_members_rows[$new_member['user_id']]['Groups'] = $groups;
      }
    }
    $form['members']['new_members']['new_members_table'] = array(
      '#type' => 'tableselect',
      '#header' => $new_members_header,
      '#options' => $new_members_rows,
    );
    $form['members']['new_members']['add'] = array(
      '#type' => 'submit',
      '#value' => t('Add member(s)'),
    );
  }
  $dropped_members = lti_tool_provider_memberships_get_dropped_memberships($member_data);
  if (!empty($dropped_members)) {
    $form['members']['dropped_members']['description'] = array(
      '#type' => 'item',
      '#title' => t('Dropped LTI Memberships'),
      '#markup' => t(count($dropped_members) . ' member(s) dropped'),
    );
    $dropped_members_header = array(
      'User ID' => t('User ID'),
      'Roles' => t('Roles'),
    );
    $dropped_members_rows = array();
    foreach ($dropped_members as $dropped_member) {
      $dropped_members_rows[$dropped_member->lti_tool_provider_memberships_id] = array(
        'User ID' => $dropped_member->lti_tool_provider_memberships_user_id,
        'Roles' => $dropped_member->lti_tool_provider_memberships_role,
      );
    }
    $form['members']['dropped_members']['dropped_members_table'] = array
    (
      '#type' => 'tableselect',
      '#header' => $dropped_members_header,
      '#options' => $dropped_members_rows,
    );
    $form['members']['dropped_members']['remove_dropped_members'] = array(
      '#type' => 'submit',
      '#value' => t('Invalidate selected member(s) in context, leaving content'),
    );
    $form['members']['dropped_members']['remove_dropped_members_contents'] = array(
      '#type' => 'submit',
      '#value' => t('Remove selected member(s) and their content'),
    );
  }
  $altered_members = lti_tool_provider_memberships_get_altered_memberships($member_data);
  if (!empty($altered_members)) {
    $form['members']['altered_members']['description'] = array(
      '#type' => 'item',
      '#title' => t('Altered LTI Memberships'),
      '#markup' => t(count($altered_members) . ' member(s) altered'),
    );
    $altered_members_header = array(
      'User ID' => t('User ID'),
      'Old Roles' => t('Old Roles'),
      'New Roles' => t('New Roles'),
      'Dropped Groups' => t('Dropped Groups'),
      'Added Groups' => t('Added Groups'),
    );
    $altered_members_rows = array();
    foreach ($altered_members as $altered_member) {
      $dropped_subgroups = '';
      if (isset($altered_member['dropped_subgroups'])) {
        foreach ($altered_member['dropped_subgroups'] as $subgroup) {
          $dropped_subgroups .= ' ' . $subgroup['title'];
        }
      }
      $added_subgroups = '';
      if (isset($altered_member['added_subgroups'])) {
        foreach ($altered_member['added_subgroups'] as $subgroup) {
          $added_subgroups .= ' ' . $subgroup['title'];
        }
      }
      $altered_members_rows[$altered_member['lti_tool_provider_memberships_id']] = array(
        'User ID' => $altered_member['user_id'],
        'Old Roles' => isset($altered_member['old_roles']) ? $altered_member['old_roles'] : '',
        'New Roles' => isset($altered_member['new_roles']) ? $altered_member['new_roles'] : '',
        'existing_roles' => $altered_member['existing_roles'],
        'Dropped Groups' => $dropped_subgroups,
        'dropped_subgroups' => isset($altered_member['dropped_subgroups']) ? $altered_member['dropped_subgroups'] : '',
        'Added Groups' => $added_subgroups,
        'added_subgroups' => isset($altered_member['added_subgroups']) ? $altered_member['added_subgroups'] : '',

      );
    }
    $form['members']['altered_members']['altered_members_table'] = array
    (
      '#type' => 'tableselect',
      '#header' => $altered_members_header,
      '#options' => $altered_members_rows,
    );
    $form['members']['altered_members']['update_altered_members'] = array(
      '#type' => 'submit',
      '#value' => t('Update selected member(s) in context'),
    );
  }
  $query = new EntityFieldQuery();
  $result = $query
  -> entityCondition('entity_type', 'lti_tool_provider_memberships')
  -> propertycondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'])
  -> execute();
  $form['members']['current_members']['description'] = array(
    '#type' => 'item',
    '#title' => t('Current LTI Membership'),
    '#markup' => !empty($result) ? t(count((array)$result['lti_tool_provider_memberships']) . ' current member(s)') : '',
  );
  $current_members_header = array(
    array('data' => 'User ID', 'field' => 'lti_tool_provider_memberships_user_id', 'sort' => 'asc'),
    array('data' => 'Roles', 'field' => 'lti_tool_provider_memberships_role'),
    array('data' => 'Date Added', 'field' => 'date_added'),
    array('data' => 'Date Updated', 'field' => 'date_updated'),
    array('data' => 'Date Dropped', 'field' => 'date_dropped'),
    array('data' => 'Status', 'field' => 'lti_tool_provider_memberships_status')
  );
  if (isset($form_state['storage']['paging_num']) && $form_state['storage']['paging_num'] > 0) {
    $limit = $_SESSION['lti_tool_provider_membership_limit'] = $form_state['storage']['paging_num'];
  }
  elseif (isset($_SESSION['lti_tool_provider_membership_limit'])) {
    $limit = $_SESSION['lti_tool_provider_membership_limit'];
  }
  else {
    $limit = $_SESSION['lti_tool_provider_membership_limit'] = 10;
  }
  $query = db_select('lti_tool_provider_memberships', 'd')
  -> condition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'])
  -> fields('d', array('lti_tool_provider_memberships_user_id', 'lti_tool_provider_memberships_role', 'date_added', 'date_updated', 'date_dropped', 'lti_tool_provider_memberships_status'));
  $query = $query
  -> extend('TableSort')
  -> orderByHeader($current_members_header);
  $query = $query
  -> extend('PagerDefault')
  -> limit($limit)
  -> element(13);
  $result = $query
  -> execute();
  $current_members_rows = array();
  foreach ($result as $entity) {
    $current_members_rows[] = array(
      $entity->lti_tool_provider_memberships_user_id,
      $entity->lti_tool_provider_memberships_role,
      format_date($entity->date_added),
      format_date($entity->date_updated),
      isset($entity->date_dropped) ? format_date($entity->date_dropped) : '-',
      $entity->lti_tool_provider_memberships_status,
    );
  }
  $form['members']['current_members']['pager_table'] = array
  (
    '#theme' => 'table',
    '#header' => $current_members_header,
    '#rows' => $current_members_rows,
    '#empty' => t('No LTI Membership entity exists.'),
  );
  $form['members']['current_members']['pager_table_pager'] = array('#theme' => 'pager', '#element' => 13);
  $form['members']['current_members']['paging_num'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'textfield',
    '#title' => t('Items per page'),
    '#default_value' => $limit,
    '#maxlength' => 4,
    '#size' => 3,
  );
  $form['members']['current_members']['paging_num_btn'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
    '#suffix' => '</div>',
  );
  return $form;
}

/**
 * AJAX callback for the lti_tool_provider_memberships_form.
 *
 * @param array $form
 *   The form.
 * @param array $form_state
 *   The form state.
 */
function lti_tool_provider_memberships_form_callback($form, &$form_state) {
  return $form['members'];
}

/**
 * Membership admin form submit handler.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function lti_tool_provider_memberships_form_submit($form, &$form_state) {
  $consumer_domain = $_SESSION['lti_tool_provider_context_info']['consumer_domain'];
  $group_entity = $_SESSION['lti_tool_provider_context_info']['course_entity_type'];
  $group_eid = $_SESSION['lti_tool_provider_context_info']['course_entity_eid'];
  // If handling subgroups, get a list of subgroups for this context group.
  if (module_exists('lti_tool_provider_og') && variable_get('lti_tool_provider_memberships_subgroups') &&
    (($selected_subgroup_bundle = variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle')) != 'none:None')) {
    $all_subgroups = lti_tool_provider_memberships_get_subgroups();
  }
  if ($form_state['clicked_button']['#parents']['0'] == 'add') {
    $members = $form_state['complete form']['members']['new_members']['new_members_table']['#value'];
    foreach ($members as $member) {
      $lti_user = $member . $consumer_domain;
      $result = db_query('SELECT uid FROM {users} WHERE name = :lti_user', array(':lti_user' => $lti_user));
      $user_created = FALSE;
      foreach ($result as $row) {
        if (isset($row->uid)) {
          $user_created = TRUE;
        }
      }
      // Create user
      if (!$user_created) {
        $member_info = array();
        $member_info['consumer_domain'] = $consumer_domain;
        $member_info['lis_person_contact_email_primary'] = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['person_contact_email_primary'];
        $member_info['lis_person_name_given'] = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['person_name_given'];
        $member_info['lis_person_name_family'] = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['person_name_family'];
        $member_info['lis_person_name_full'] = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['person_name_full'];
        lti_tool_provider_create_account($lti_user, $member_info);
      }
      $account = user_load_by_name($lti_user);
      $roles = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['Roles'];
      // Map Drupal global roles based on the user LTI role.
      if (isset($roles)) {
        lti_tool_provider_assign_global_roles_to_user($roles, $account->uid);
      }
      if (module_exists('lti_tool_provider_og')) {
        $users_groups = og_get_entity_groups('user', $account->uid);
        // Add the user to the group.
        if (!array_key_exists($group_entity, $users_groups) || !in_array($group_eid, $users_groups[$group_entity])) {
          og_group($group_entity, $group_eid, array(
          'entity_type' => 'user',
          'entity' => $account->uid,
          'field_name' => FALSE,
          'state' => OG_STATE_ACTIVE,
          ));
        }
        // Grant the course group roles.
        if (isset($roles)) {
          $found_roles = lti_tool_provider_og_search_roles($roles);
          foreach ($found_roles as $lti_role => $found_role) {
            og_role_grant($group_entity, $group_eid, $account->uid, $found_role);
          }
        }
        // If with_groups, provision subgroups and grant subgroup membership.
        if (variable_get('lti_tool_provider_memberships_subgroups')) {
          $membership_groups = $form_state['complete form']['members']['new_members']['new_members_table']['#options'][$member]['groups'];
          lti_tool_provider_memberships_add_user_to_membership_groups($account->uid, $membership_groups, $roles);
        }
      }
      // Update or create the membership.
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_user_id', $member, '=')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> execute();
      if (!empty($result)) {
        // Update
        $entity = reset(entity_load('lti_tool_provider_memberships', array_keys($result['lti_tool_provider_memberships'])));
        $entity->lti_tool_provider_memberships_status = 'Active';
        $entity->lti_tool_provider_memberships_date_dropped = NULL;
        $entity->lti_tool_provider_memberships_date_added = REQUEST_TIME;
      }
      else {
        // Create a memberships entity
        $entity = entity_get_controller('lti_tool_provider_memberships')->create();
        $entity->lti_tool_provider_memberships_context_id = $_SESSION['lti_tool_provider_context_info']['context_id'];
        $entity->lti_tool_provider_memberships_uid = $account->uid;
        $entity->lti_tool_provider_memberships_user_id = $member;
        $entity->lti_tool_provider_memberships_role = $roles;
      }
      lti_tool_provider_memberships_save($entity);
      drupal_set_message(t('Membership for %name has been updated.', array('%name' => $member)));
    }
  }
  elseif ($form_state['clicked_button']['#parents']['0'] == 'remove_dropped_members') {
    $members = $form_state['complete form']['members']['dropped_members']['dropped_members_table']['#value'];
    foreach ($members as $member) {
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_id', $member, '=')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> execute();
      if (!empty($result)) {
        $membership = reset(entity_load('lti_tool_provider_memberships',  array_keys($result['lti_tool_provider_memberships'])));
        $account = user_load($membership->lti_tool_provider_memberships_uid);
        if (module_exists('lti_tool_provider_og')) {
          // If handling subgroups, remove membership of any subgroup.
          if (variable_get('lti_tool_provider_memberships_subgroups') &&
            (($selected_subgroup_bundle = variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle')) != 'none:None')) {
            foreach ($all_subgroups as $key => $subgroup) {
              if ($mid = og_get_membership($subgroup_entity, $subgroup, 'user', $membership->lti_tool_provider_memberships_uid)) {
                og_membership_delete($mid->id);
              }
            }
          }
          // Remove og membership of context group.
          $mid = og_get_membership($group_entity, $group_id, 'user', $account->uid);
          og_membership_delete($mid->id);
        }
        // Update membership as dropped.
        $membership->lti_tool_provider_memberships_status = 'Inactive';
        $membership->date_dropped = REQUEST_TIME;
        lti_tool_provider_memberships_save($membership);
      }
      drupal_set_message(t('%name\'s membership invalidated.', array('%name' => $membership->lti_tool_provider_memberships_user_id)));
    }
  }
  elseif ($form_state['clicked_button']['#parents']['0'] == 'remove_dropped_members_contents') {
    $members = $form_state['complete form']['members']['dropped_members']['dropped_members_table']['#value'];
    foreach ($members as $member) {
      // Find the members membership in this context.
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_id', $member, '=')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> execute();
      if (!empty($result)) {
        $membership = reset(entity_load('lti_tool_provider_memberships',  array_keys($result['lti_tool_provider_memberships'])));
        $account = user_load($membership->lti_tool_provider_memberships_uid);
        if (module_exists('lti_tool_provider_og')) {
          // Remove node(s) owned by member in this context.
          $query_join = db_query('SELECT nid, id FROM {node} JOIN {og_membership} WHERE node.nid = og_membership.etid AND og_membership.entity_type = :entity_type AND node.uid = :uid AND og_membership.group_type = :group_type AND og_membership.gid = :gid',
            array(
              ':entity_type' => 'node',
              ':uid' => $account->uid,
              ':group_type' => $group_entity,
              ':gid' => $group_eid
            )
          );
          foreach ($query_join as $row) {
            // Delete node
            node_delete($row->nid);
            // Remove node og membership.
            // og_membership_delete($row->id); // Should happen automatically.
          }
          // If handling subgroups, remove membership of any subgroup.
          if (variable_get('lti_tool_provider_memberships_subgroups') &&
            (($selected_subgroup_bundle = variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle')) != 'none:None')) {
            foreach ($all_subgroups as $key => $subgroup) {
              if ($mid = og_get_membership($subgroup_entity, $subgroup, 'user', $membership->lti_tool_provider_memberships_uid)) {
                og_membership_delete($mid->id);
              }
            }
          }
          // Remove og membership of context group.
          $mid = og_get_membership($group_entity, $group_eid, 'user', $account->uid);
          og_membership_delete($mid->id);
        }
        // Delete membership.
        lti_tool_provider_memberships_delete($membership);
        // If user has no membership in another context, delete the account.
        $query = new EntityFieldQuery();
        $result = $query
        -> entityCondition('entity_type', 'lti_tool_provider_memberships')
        -> propertyCondition('lti_tool_provider_memberships_id', $member, '=')
        -> execute();
        if (empty($result)) {
          // Delete user
          user_delete($account->uid);
          drupal_set_message(t('User %name has been deleted.', array('%name' => $account->name)));
        }
      }
      drupal_set_message(t('%name and content removed from context.', array('%name' => $entity[$member]->lti_tool_provider_memberships_user_id)));
    }
  }
  elseif ($form_state['clicked_button']['#parents']['0'] == 'update_altered_members') {
    $members = $form_state['complete form']['members']['altered_members']['altered_members_table']['#value'];
    foreach ($members as $member) {
      // Find membership.
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_id', $member, '=')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> execute();
      if (empty($result)) {
        // Missing membership.
        continue;
      }
      $membership = reset(entity_load('lti_tool_provider_memberships',  array_keys($result['lti_tool_provider_memberships'])));
      $account = user_load($membership->lti_tool_provider_memberships_uid);
      $old_roles = $form_state['complete form']['members']['altered_members']['altered_members_table']['#options'][$member]['Old Roles'];
      $new_roles = $form_state['complete form']['members']['altered_members']['altered_members_table']['#options'][$member]['New Roles'];
      $existing_roles = $form_state['complete form']['members']['altered_members']['altered_members_table']['#options'][$member]['existing_roles'];
      // If handling context groups.
      if (module_exists('lti_tool_provider_og') && isset($_SESSION['lti_tool_provider_context_info']['course_entity_type'])) {
        $group_entity = $_SESSION['lti_tool_provider_context_info']['course_entity_type'];
        $group_eid = $_SESSION['lti_tool_provider_context_info']['course_entity_eid'];
        // if roles have changed.
        if (!empty($old_roles) || !empty($new_roles)) {
          // Remove current roles from context group.
          $current_roles = og_get_user_roles($group_entity, $group_eid, $account->uid, FALSE);
          foreach ($current_roles as $rid => $dropped_role) {
            og_role_revoke($group_entity, $group_eid, $account->uid, $rid);
          }
          $current_roles = og_get_user_roles($group_entity, $group_eid, $account->uid, FALSE);
          // Add roles to context group.
          $found_roles = lti_tool_provider_og_search_roles($new_roles);
          foreach ($found_roles as $lti_role => $found_role) {
            og_role_grant($group_entity, $group_eid, $account->uid, $found_role);
          }
        }
        // If handling subgroups
        if (variable_get('lti_tool_provider_memberships_subgroups') &&
          (($selected_subgroup_bundle = variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle')) != 'none:None')) {
          list($subgroup_entity, $subgroup_bundle) = explode(':', $selected_subgroup_bundle);
          // if roles have changed.
          if (!empty($old_roles) || !empty($new_roles)) {
            $subgroups = lti_tool_provider_memberships_get_subgroups();
            // Find the subgroup nids that match the member data groups.
            // Get users current groups.
            $users_groups = reset(og_get_entity_groups('user', $account->uid));
            $old_subgroups = array_intersect($subgroups, $users_groups);
            $subgroup_roles = lti_tool_provider_memberships_search_roles($new_roles);
            foreach ($old_subgroups as $old_subgroup) {
              // Remove old roles from subgroups.
              $current_roles = og_get_user_roles($subgroup_entity, $old_subgroup, $account->uid, FALSE);
              foreach ($current_roles as $rid => $dropped_role) {
                og_role_revoke($subgroup_entity, $old_subgroup, $account->uid, $rid);
              }
              // Add new roles to subgroups.
              foreach ($subgroup_roles as $lti_role => $subgroup_role) {
                og_role_grant($subgroup_entity, $old_subgroup, $account->uid, $subgroup_role);
              }
            }
          }
          // Drop user from dropped subgroups.
          $dropped_subgroups = $form_state['complete form']['members']['altered_members']['altered_members_table']['#options'][$member]['dropped_subgroups'];
          foreach ($dropped_subgroups as $dropped_subgroup) {
            // Find the subgroup that matches the dropped_group.
            $subgroup_eid = lti_tool_provider_memberships_get_subgroup($subgroup_entity, $subgroup_bundle, $dropped_subgroup);
            if ($mid = og_get_membership($subgroup_entity, $subgroup_eid, 'user', $account->uid)) {
              og_membership_delete($mid->id);
            }
          }
          // Add user to added subgroups (creating them as necessary).
          $added_subgroups = $form_state['complete form']['members']['altered_members']['altered_members_table']['#options'][$member]['added_subgroups'];
          lti_tool_provider_memberships_add_user_to_membership_groups($account->uid, $added_subgroups, $existing_roles);
        }
      }
      if (!empty($old_roles) || !empty($new_roles)) {
        // Update global roles.
        lti_tool_provider_unassign_global_roles_from_user($old_roles, $account->uid);
        lti_tool_provider_assign_global_roles_to_user($new_roles, $account->uid);
      }
      // Update membership as updated.
      $membership->lti_tool_provider_memberships_status = 'Active';
      if (!empty($old_roles) || !empty($new_roles)) {
        $membership->lti_tool_provider_memberships_role = $new_roles;
      }
      $membership->date_updated = REQUEST_TIME;
      lti_tool_provider_memberships_save($membership);
    }
    drupal_set_message(t('%name\'s membership updated.', array('%name' => $membership->lti_tool_provider_memberships_user_id)));
  }
}

/**
 * Validate callback for membership form.
 *
 * @param array $form
 *   The form to validate.
 * @param array $form_state
 *   The form state of the form being validated.
 */
function lti_tool_provider_memberships_form_validate($form, &$form_state) {
  if (isset($form_state['clicked_button'])) {
    if ($form_state['clicked_button']['#parents']['0'] == 'fetch_xml_btn') {
      $form_state['storage']['fetch_xml_btn'] = TRUE;
      $form_state['rebuild'] = TRUE;
    }
    if ($form_state['clicked_button']['#parents']['0'] == 'add') {
      if (empty($form_state['complete form']['members']['new_members']['new_members_table']['#value'])) {
        form_set_error('', t('No members selected in New LTI Memberships table.'));
      }
    }
    elseif ($form_state['clicked_button']['#parents']['0'] == 'remove_dropped_members') {
      if (empty($form_state['complete form']['members']['dropped_members']['dropped_members_table']['#value'])) {
        form_set_error('', t('No members selected in Dropped LTI Memberships table.'));
      }
    }
    elseif ($form_state['clicked_button']['#parents']['0'] == 'remove_dropped_members_contents') {
      if (empty($form_state['complete form']['members']['dropped_members']['dropped_members_table']['#value'])) {
        form_set_error('', t('No members selected in Dropped LTI Memberships table.'));
      }
    }
    elseif ($form_state['clicked_button']['#parents']['0'] == 'update_altered_members') {
      if (empty($form_state['complete form']['members']['altered_members']['altered_members_table']['#value'])) {
        form_set_error('', t('No members selected in Altered LTI Memberships table.'));
      }
    }
    elseif ($form_state['clicked_button']['#parents']['0'] == 'update_altered_members_contents') {
      if (empty($form_state['complete form']['members']['altered_members']['altered_members_table']['#value'])) {
        form_set_error('', t('No members selected in Altered LTI Memberships table.'));
      }
    }
    elseif ($form_state['clicked_button']['#parents']['0'] == 'paging_num_btn') {
      $form_state['storage']['paging_num'] = $form_state['input']['paging_num'];
      $form_state['rebuild'] = TRUE;
    }
  }
}

/**
 * Fetch memberships data from consumer.
 *
 * Perform an OAuth POST on the memberships service and
 * retrieve the memberships XML.
 *
 * @return string
 *   The retrieved xml.
 */
function lti_tool_provider_memberships_request() {
  if (isset($_SESSION['lti_tool_provider_context_info'])) {
    $url = $_SESSION['lti_tool_provider_context_info']['ext_ims_lis_memberships_url'];
    $query_params = array();
    $query_string = parse_url($url, PHP_URL_QUERY);
    if (!is_null($query_string)) {
      $query_items = explode('&', $query_string);
      foreach ($query_items as $item) {
        if (strpos($item, '=') !== FALSE) {
          list($name, $value) = explode('=', $item);
          $query_params[$name] = $value;
        }
        else {
          $query_params[$name] = '';
        }
      }
    }
    $params = array(
      'lti_message_type' => (variable_get('lti_tool_provider_memberships_subgroups')) ?
      'basic-lis-readmembershipsforcontextwithgroups' : 'basic-lis-readmembershipsforcontext',
      'id' => $_SESSION['lti_tool_provider_context_info']['ext_ims_lis_memberships_id'],
      'lti_version' => 'LTI-1p0',
      'oauth_callback' => 'about:blank',
      'oauth_consumer_key' => $_SESSION['lti_tool_provider_context_info']['oauth_consumer_key'],
    );
    $params = $params + $query_params;
    $oauth_consumer_key = $_SESSION['lti_tool_provider_context_info']['oauth_consumer_key'];
    $store = new LTIToolProviderOAuthDataStore();
    $consumer = $store->lookup_consumer($oauth_consumer_key);
    $token = '';
    $hmac_method = new OAuthSignatureMethod_HMAC_SHA1();
    $request = OAuthRequest::from_consumer_and_token($consumer, $token, 'POST', $url, $params);
    $request->sign_request($hmac_method, $consumer, $token);
    $params = $request->get_parameters();
    foreach (array_keys($query_params) as $name) {
      unset($params[$name]);
    }
    $options = array(
      'data' => http_build_query($params),
      'method' => 'POST',
      'max_redirects' => 5,
      'headers' =>  array('Content-Type' => 'application/x-www-form-urlencoded'),
    );
    $ext_response = drupal_http_request($url, $options);
    if ($ext_response->status_message != 'OK') {
      drupal_set_message(t('Request failed.'), 'info');
      return '';
    }
    return $ext_response->data;
  }
  return '';
}

/**
 * Form a membership list array from the XML memberships.
 *
 * @param boolean $new
 *   If TRUE, retrieve a new memberships list from the consumer.
 *
 * @return array|NULL
 *   An array containing the memberships from the latest
 *   saved memberships data file.
 */
function lti_tool_provider_memberships_get_memberships($new = FALSE) {
  $memberships_context = lti_tool_provider_memberships_get_memberships_context();
  $fid = $memberships_context->lti_tool_provider_memberships_context_file_id;
  if ($new) {
    // Retrieve a new copy of the memberships XML from the Consumer.
    $data = lti_tool_provider_memberships_request();
    if ($fid != 0) {
      // Remove the old file.
      $file = file_load($fid);
      file_usage_delete($file, 'lti_tool_provider_memberships');
      file_delete($file);
    }
    // Create the new file.
    $file = file_save_data($data, NULL, FILE_EXISTS_REPLACE);
    file_usage_add($file, 'lti_tool_provider_memberships', 'lti_tool_provider_memberships_context', $memberships_context->lti_tool_provider_memberships_context_id);
    // Set the fid in the memberships context to the new file and save it.
    $memberships_context->lti_tool_provider_memberships_context_file_id = $file->fid;
    lti_tool_provider_memberships_context_save($memberships_context);
  }
  else {
    if ($fid != 0) {
      $file = file_load($fid);
      $data = file_get_contents($file->uri);
    }
    else {
      $data = '';
    }
  }
  $memberships = array();
  if ($data != '') {
    $message_response = new SimpleXMLElement($data);
    if (isset($message_response->memberships)) {
      $members = $message_response->memberships->member;
      $count = $members->count();
      for ($i = 0; $i < $count; $i++) {
        $memberships[$i]['user_id'] = (string)$members[$i]->user_id;
        $memberships[$i]['roles'] = (string)$members[$i]->roles;
        $memberships[$i]['person_sourcedid'] = (string)$members[$i]->person_sourcedid;
        $memberships[$i]['person_contact_email_primary'] = (string)$members[$i]->person_contact_email_primary;
        $memberships[$i]['person_name_given'] = (string)$members[$i]->person_name_given;
        $memberships[$i]['person_name_family'] = (string)$members[$i]->person_name_family;
        $memberships[$i]['person_name_full'] = (string)$members[$i]->person_name_full;
        if (variable_get('lti_tool_provider_memberships_subgroups') && isset($members[$i]->groups)) {
          foreach ($members[$i]->groups->group as $group) {
            $memberships[$i]['groups'][] = array('id' => (string)$group->id, 'title' => (string)$group->title);
          }
        }
      }
    }
  }
  return $memberships;
}

/**
 *
 */
function lti_tool_provider_memberships_get_memberships_context() {
  // Search for the Memberships Context.
  $query = new EntityFieldQuery();
  $result = $query
  -> entityCondition('entity_type', 'lti_tool_provider_memberships_context')
  -> propertyCondition('lti_tool_provider_memberships_context_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'])
  -> execute();
  if (empty($result['lti_tool_provider_memberships_context'])) {
    // If no matching memberships context create one.
    $memberships_context = entity_get_controller('lti_tool_provider_memberships_context')->create();
    $memberships_context->lti_tool_provider_memberships_context_context_id = $_SESSION['lti_tool_provider_context_info']['context_id'];
    lti_tool_provider_memberships_context_save($memberships_context);
  }
  else {
    // Load the found memberships context.
    $context_id = reset($result['lti_tool_provider_memberships_context'])->lti_tool_provider_memberships_context_id;
    $memberships_context = lti_tool_provider_memberships_context_load($context_id);
  }
  return $memberships_context;
}

/**
 * Extract the new memberships from the memberships list.
 *
 * @param array $member_data
 *   The current saved memberships data.
 *
 * @return array
 *   The new (added) memberships.
 */
function lti_tool_provider_memberships_get_new_memberships($member_data) {
  $new_members = array();
  if (!empty($member_data)) {
    for ($i = 0; $i < count($member_data); $i++) {
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> propertyCondition('lti_tool_provider_memberships_user_id', $member_data[$i]['user_id'])
      //     -> propertyCondition('lti_tool_provider_memberships_role', $member_data[$i]['roles'])
      -> propertyCondition('lti_tool_provider_memberships_status', 'Active')
      -> execute();
      if (empty($result)) {
        $new_members[$i]['user_id'] = $member_data[$i]['user_id'];
        $new_members[$i]['roles'] = $member_data[$i]['roles'];
        $new_members[$i]['person_sourcedid'] = $member_data[$i]['person_sourcedid'];
        $new_members[$i]['person_contact_email_primary'] = $member_data[$i]['person_contact_email_primary'];
        $new_members[$i]['person_name_given'] = $member_data[$i]['person_name_given'];
        $new_members[$i]['person_name_family'] = $member_data[$i]['person_name_family'];
        $new_members[$i]['person_name_full'] = $member_data[$i]['person_name_full'];
        if (variable_get('lti_tool_provider_memberships_subgroups') && isset($member_data[$i]['groups'])) {
          $new_members[$i]['groups'] = $member_data[$i]['groups'];
        }
      }
    }
  }
  if (!empty($new_members)) {
    foreach ($new_members as $key => $row) {
      $user_id[$key]  = $row['user_id'];
    }
    array_multisort($user_id, SORT_ASC, $new_members);
  }
  return $new_members;
}

/**
 * Extract the dropped memberships from the memberships list.
 *
 * @param array $member_data
 *   The current saved memberships data.
 *
 * @return array
 *   The dropped memberships.
 */
function lti_tool_provider_memberships_get_dropped_memberships($member_data) {
  $dropped_members = array();
  if (!empty($member_data)) {
    // Load all active members of current contextx.
    $query = new EntityFieldQuery();
    $result = $query
    -> entityCondition('entity_type', 'lti_tool_provider_memberships')
    -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'])
    -> propertyCondition('lti_tool_provider_memberships_status', 'Active')
    -> execute();
    $entities = entity_load('lti_tool_provider_memberships', array_keys($result['lti_tool_provider_memberships']));
    foreach ($entities as $entity) {
      $found = FALSE;
      foreach ($member_data as $key => $data) {
        if (($entity->lti_tool_provider_memberships_user_id == $data['user_id'])) {
          $found = TRUE;
          unset($member_data[$key]);
          break;
        }
      }
      if (!$found) {
        if (!isset($entity->date_dropped)) {
          $dropped_members[] = $entity;
        }
      }
    }
  }
  if (!empty($dropped_members)) {
    foreach ($dropped_members as $key => $row) {
      $user_id[$key]  = $row->lti_tool_provider_memberships_user_id;
    }
    array_multisort($user_id, SORT_ASC, $dropped_members);
  }
  return $dropped_members;
}

function _lti_tool_provider_memberships_compare_groups($g1, $g2) {
  return strcmp($g1['id'], $g2['id']);
}

/**
 * Extract the memberships with altered groups and roles from the memberships list.
 *
 * @param array $member_data
 *   The current saved memberships data.
 *
 * @return array
 *   The altered memberships.
 */
function lti_tool_provider_memberships_get_altered_memberships($member_data) {
  $altered_members = array();
  if (!empty($member_data)) {
    for ($i = 0; $i < count($member_data); $i++) {
      $query = new EntityFieldQuery();
      $result = $query
      -> entityCondition('entity_type', 'lti_tool_provider_memberships')
      -> propertyCondition('lti_tool_provider_memberships_context_id', $_SESSION['lti_tool_provider_context_info']['context_id'], '=')
      -> propertyCondition('lti_tool_provider_memberships_user_id', $member_data[$i]['user_id'])
      //      -> propertyCondition('lti_tool_provider_memberships_role', $member_data[$i]['roles'])
      -> propertyCondition('lti_tool_provider_memberships_status', 'Active')
      -> execute();
      if (isset($result['lti_tool_provider_memberships'])) {
        $member = reset(entity_load('lti_tool_provider_memberships', array_keys($result['lti_tool_provider_memberships'])));
        if ($member->lti_tool_provider_memberships_role != $member_data[$i]['roles']) {
          $altered_members[$i]['lti_tool_provider_memberships_id'] = $member->lti_tool_provider_memberships_id;
          $altered_members[$i]['user_id'] = $member_data[$i]['user_id'];
          $altered_members[$i]['old_roles'] = $member->lti_tool_provider_memberships_role;
          $altered_members[$i]['new_roles'] = $member_data[$i]['roles'];
          $altered_members[$i]['existing_roles'] = $member_data[$i]['roles'];
        }
        if (variable_get('lti_tool_provider_memberships_subgroups')) {
          $subgroups = lti_tool_provider_memberships_get_subgroups();
          // Find the subgroup nids that match the member data groups.
          // Get users current groups.
          $users_groups = reset(og_get_entity_groups('user', $member->lti_tool_provider_memberships_uid));
          $old_subgroups = array_intersect($subgroups, $users_groups);
          $current_groups = array();
          foreach ($old_subgroups as $gid) {
            $group = node_load($gid);
            $current_groups[] = array(
              'id' => empty($group->field_lti_memberships_group_id) ? '' : $group->field_lti_memberships_group_id['und'][0]['value'],
              'title' => $group->title,
            );
          }
          $new_subgroups = isset($member_data[$i]['groups']) ? $member_data[$i]['groups'] : array();
          $dropped_subgroups = array_udiff($current_groups, $new_subgroups, '_lti_tool_provider_memberships_compare_groups');
          $added_subgroups = array_udiff($new_subgroups, $current_groups, '_lti_tool_provider_memberships_compare_groups');
          if (count($dropped_subgroups) != 0 || count($added_subgroups) != 0) {
            $altered_members[$i]['lti_tool_provider_memberships_id'] = $member->lti_tool_provider_memberships_id;
            $altered_members[$i]['user_id'] = $member_data[$i]['user_id'];
            $altered_members[$i]['dropped_subgroups'] = $dropped_subgroups;
            $altered_members[$i]['added_subgroups'] = $added_subgroups;
            $altered_members[$i]['existing_roles'] = $member_data[$i]['roles'];
          }
        }
      }
    }
  }
  if (!empty($altered_members)) {
    foreach ($altered_members as $key => $row) {
      $user_id[$key]  = $row['user_id'];
    }
    array_multisort($user_id, SORT_ASC, $altered_members);
  }
  return $altered_members;
}



/**
 * Implements hook_lti_tool_provider_launch().
 */
function lti_tool_provider_memberships_lti_tool_provider_launch_alter(&$launch_info, &$account) {
  // If user does not have a membership, create one
  global $user;
  $query = new EntityFieldQuery();
  $result = $query
  -> entityCondition('entity_type', 'lti_tool_provider_memberships')
  -> propertyCondition('lti_tool_provider_memberships_context_id', $launch_info['context_id'])
  -> propertyCondition('lti_tool_provider_memberships_user_id', $launch_info['user_id'])
  -> execute();
  if (empty($result)) {
    $entity = entity_get_controller('lti_tool_provider_memberships')->create();
    $entity->lti_tool_provider_memberships_context_id = $launch_info['context_id'];
    $entity->lti_tool_provider_memberships_uid = isset($account->uid) ? $account->uid : NULL;
    $entity->lti_tool_provider_memberships_user_id = $launch_info['user_id'];
    $entity->lti_tool_provider_memberships_role = $launch_info['roles'];
    lti_tool_provider_memberships_save($entity);
  }
}

/**
 * Implements hook_user_delete().
 */
function lti_tool_provider_memberships_user_delete($account) {
  // Remove membership entities belonging to account.
  $query = new EntityFieldQuery();
  $results = $query
  -> entityCondition('entity_type', 'lti_tool_provider_memberships')
  -> propertyCondition('lti_tool_provider_memberships_uid', $account->uid, '=')
  -> execute();
  lti_tool_provider_memberships_delete_multiple($results['lti_tool_provider_memberships']);
}

/**
 * Implements hook_user_cancel().
 */
function lti_tool_provider_memberships_user_cancel($account) {
  // Remove membership entities in current context belonging to account.
}

/**
 * Save a memberships entity.
 *
 * @param object $entity
 *   The memberships entity to be saved.
 *
 * @return object $entity
 *   The memberships entity that was saved.
 */
function lti_tool_provider_memberships_context_save(&$entity) {
  return entity_get_controller('lti_tool_provider_memberships_context')->save($entity);
}

/**
 * Delete a memberships entity.
 *
 * @param object $entity
 *   The memberships entity to be deleted.
 */
function lti_tool_provider_memberships_context_delete($entity) {
  entity_get_controller('lti_tool_provider_memberships_context')->delete($entity);
}

/**
 * Load a memberships entity from an id.
 *
 * @param integer $id
 *   The id of the requested memberships entity.
 * @param boolean $reset
 *   Causes internal cache to be reset.
 *
 * @return boolean:object
 *   The requested entity or FALSE.
 */
function lti_tool_provider_memberships_context_load($id = NULL, $reset = FALSE) {
  $ids = isset($id) ? array($id) : array();
  $obj = lti_tool_provider_memberships_context_load_multiple($ids, $reset);
  return $obj ? reset($obj) : FALSE;
}

/**
 * Load memberships entities from an array of ids.
 *
 * @param array $ids
 *   An array of ids or if NULL
 * @param array $conditions
 *   An array of conditions on the query.
 * @param boolean $reset
 *   Causes internal cache to be reset.
 *
 * @return array
 *   An array of memberships entities or an empty array.
 */
function lti_tool_provider_memberships_context_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('lti_tool_provider_memberships_context', $ids, $conditions, $reset);
}

/**
 * Return an array of group roles that are mapped from a string of LTI roles.
 *
 * @param string $lti_roles_str
 *   A string containing the lti roles from the lti launch parameters.
 *
 * @return array
 *   The found roles.
 */
function lti_tool_provider_memberships_search_roles($lti_roles_str) {
  $found_roles = array();
  $group_role_array = variable_get('lti_tool_provider_memberships_subgroup_role_array');
  $lti_roles = explode(',', $lti_roles_str);
  foreach ($lti_roles as $raw_lti_role) {
    $lti_role_exploded = explode('/', $raw_lti_role);
    if (count($lti_role_exploded) >= 3) {
      $lti_role = $lti_role_exploded[2];
    }
    else {
      $lti_role = $lti_role_exploded[0];
    }
    if (isset($group_role_array[$lti_role])) {
      $found_roles[$lti_role] = $group_role_array[$lti_role];
    }
    else {
      drupal_set_message(t('Role @lti_role, not found.', array('@lti_role' => $lti_role)), 'warning');
    }
  }
  return $found_roles;
}

/**
 * Get an array of nids of subgroups in the current context.
 */
function lti_tool_provider_memberships_get_subgroups() {
  $selected_subgroup_bundle = variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle');
  list($subgroup_entity, $subgroup_bundle) = explode(':', $selected_subgroup_bundle);
  $saved_settings = variable_get('lti_tool_provider_memberships_subgroup_mapping');
  $mapping_field = $saved_settings['LTI context group reference'];
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', $subgroup_entity)
  ->entityCondition('bundle', $subgroup_bundle)
  ->fieldCondition($mapping_field, 'og_group_ref_target_id', $_SESSION['lti_tool_provider_context_info']['course_entity_eid'], '=')
  ->execute();
  if (isset($entities['node'])) {
    return array_keys($entities['node']);
  }
  else {
    return array();
  }
}

/**
 * Find or create a membership subgroup given the id and title.
 *
 * @param string $subgroup_entity
 * @param string $subgroup_bundle
 * @param array $membership_group
 *
 * @return integer
 */
function lti_tool_provider_memberships_get_subgroup($subgroup_entity, $subgroup_bundle, $membership_group) {
  // Find the group that matches the membership group_id.
  $subgroup_mapping = variable_get('lti_tool_provider_memberships_subgroup_mapping');
  $mapping_field = $subgroup_mapping['group_id'];
  $query = new EntityFieldQuery();
  $entities = $query->entityCondition('entity_type', $subgroup_entity)
  ->entityCondition('bundle', $subgroup_bundle)
  ->fieldCondition($subgroup_mapping['group_id'], 'value', $membership_group['id'], '=')
  ->execute();
  if (empty($entities[$subgroup_entity])) {
    // No subgroup found, so provision it.
    $node = new stdClass();
    $node->type = $subgroup_bundle;
    $node->language = LANGUAGE_NONE;
    node_object_prepare($node);
    $node->uid = 0;
    if ($subgroup_mapping['group_id'] == 'Title') {
      $node->title = $membership_group['id'];
    }
    else {
      $node->{$subgroup_mapping['group_id']}[LANGUAGE_NONE][0]['value'] = $membership_group['id'];
    }
    if ($subgroup_mapping['title'] != 'none') {
      if ($subgroup_mapping['title'] == 'title') {
        $node->title = $membership_group['title'];
      }
      else {
        $node->{$subgroup_mapping['group_id']}[LANGUAGE_NONE][0]['value'] = $membership_group['title'];
      }
    }
    node_save($node);
    // Add subgroup to course group.
    og_group($_SESSION['lti_tool_provider_context_info']['course_entity_type'],
    $_SESSION['lti_tool_provider_context_info']['course_entity_eid'], array(
    'entity_type' => 'node',
    'entity' => $node->nid,
    'field_name' => $subgroup_mapping['LTI context group reference'],
    'state' => OG_STATE_ACTIVE,
    ));
    $subgroup_eid = $node->nid;
    drupal_set_message(t('Group created.'), 'info');
  }
  else {
    $sg = reset($entities[$subgroup_entity]);
    $subgroup_eid = $sg->nid;
  }
  return $subgroup_eid;
}

/**
 * Add a user to membership groups.
 *
 * Groups are created if necessary and roles are assigned.
 *
 * @param integer $uid
 *   The users uid.
 * @param array $membership_groups
 *   An array of memberships groups.
 * @param string $roles
 *   The list of LTI roles.
 */
function lti_tool_provider_memberships_add_user_to_membership_groups($uid, $membership_groups, $lti_roles) {
  list($subgroup_entity, $subgroup_bundle) = explode(':', variable_get('lti_tool_provider_memberships_subgroup_mapping_bundle'));
  if ($subgroup_entity != 'none') {
    // Get users current groups.
    $users_groups = og_get_entity_groups('user', $uid);
    // Loop through the membership groups.
    foreach ($membership_groups as $membership_group) {
      // Find or create the subgroup that matches the membership_group.
      $subgroup_eid = lti_tool_provider_memberships_get_subgroup($subgroup_entity, $subgroup_bundle, $membership_group);
      // Add the user to the group.
      if (!array_key_exists($subgroup_entity, $users_groups) || !in_array($subgroup_eid, $users_groups[$subgroup_entity])) {
        og_group($subgroup_entity, $subgroup_eid, array(
        'entity_type' => 'user',
        'entity' => $uid,
        'field_name' => FALSE,
        'state' => OG_STATE_ACTIVE,
        ));
      }
      // Grant the group roles.
      $subgroup_roles = lti_tool_provider_memberships_search_roles($lti_roles);
      foreach ($subgroup_roles as $lti_role => $subgroup_role) {
        og_role_grant($subgroup_entity, $subgroup_eid, $uid, $subgroup_role);
      }
    }
  }
}