<?php

require_once(drupal_get_path('module', 'user') . '/user.pages.inc');

/**
 * Implements hook_library_info().
 */
function lti_tool_provider_libraries_info() {
  $libraries['oauth'] = array(
    'name' => 'OAuth library',
    'vendor url' => 'http://oauth.googlecode.com',
    'download url' => 'http://oauth.googlecode.com/svn/code/php/OAuth.php',
    'version' => '1.0',
    // 'version callback' => '_lti_tool_provider_oauth_version',
    'files' => array(
      'php' => array('OAuth.php'),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_init().
 */
function lti_tool_provider_init() {
  $library = libraries_load('oauth');
  if ($library['loaded'] === FALSE) {
    drupal_set_message(t('LTI Tool Provider requires the OAuth library, install library and clear cache. Error: @error', array('@error' => $library['error'])), 'error');
  }
  return;
}

/**
 * Implements hook_permission().
 */
function lti_tool_provider_permission() {
  $permissions = array(
    'administer ltitp_consumer_entity entities' => array(
      'title' => t('Administer LTITP Consumer Information'),
    ),
    'view any ltitp_consumer_entity entity' => array(
      'title' => t('View any LTITP Consumer Information'),
    ),
    'edit any ltitp_consumer_entity entity' => array(
      'title' => t('Edit any LTITP Consumer Information'),
    ),
    'create ltitp_consumer_entity entities' => array(
      'title' => t('Create ltitp_consumer_entity Entities'),
    ),
    'administer lti_tool_provider module' => array(
      'title' => t('Administer LTI Tool Provider module'),
      'description' => t('Perform administration tasks for the LTI Tool Provider module.'),
    ),
    'view lti info' => array(
      'title' => t('View LTI Context Variables'),
    ),
  );
  return $permissions;
}

/**
 * Implements hook_menu().
 */
function lti_tool_provider_menu() {
  $items = array();
  $items['admin/config/lti-tool-provider'] = array(
    'title' => 'LTI Tool Provider',
    'description' => 'Config LTI Tool Provider',
    'page callback' => 'system_admin_menu_block_page',
    'access arguments' => array('administer lti_tool_provider module'),
    'file' => 'system.admin.inc',
    'file path' => drupal_get_path('module', 'system'),
  );
  $items['admin/config/lti-tool-provider/lti-tool-consumers'] = array(
    'title' => 'LTI Tool Consumers',
    'description' => 'Administer LTI Tool Consumers.',
    'page callback' => 'ltitp_consumer_entity_admin_page',
    'page arguments' => array('lti_tool_provider_settings'),
    'access arguments' => array('administer lti_tool_provider module'),
    'weight' => -7,
  );
  $items['admin/config/lti-tool-provider/lti-tool-consumers/view/%ltitp_consumer_entity'] = array(
    'title callback' => 'ltitp_consumer_entity',
    'title arguments' => array(5),
    'page callback' => 'ltitp_consumer_entity_view',
    'page arguments' => array(5),
    'access arguments' => array('view any ltitp_consumer_entity entity'),
  );
  $items['admin/config/lti-tool-provider/lti-tool-consumers/view/%ltitp_consumer_entity/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/lti-tool-provider/lti-tool-consumers/view/%ltitp_consumer_entity/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ltitp_consumer_entity_form', 5),
    'access arguments' => array('edit any ltitp_consumer_entity entity'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/config/lti-tool-provider/lti-tool-consumers/add'] = array(
    'title' => 'Add LTI Consumer',
    'page callback' => 'ltitp_consumer_entity_add',
    'access arguments' => array('create ltitp_consumer_entity entities'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/lti-tool-provider/user-attributes'] = array(
    'title' => 'User Attributes',
    'description' => 'Configure LTI context to user attribute mapping.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_lti_tool_provider_user_attributes'),
    'access arguments' => array('administer lti_tool_provider module'),
    'weight' => -6,
  );
  $items['admin/config/lti-tool-provider/global-roles'] = array(
    'title' => 'Global Roles',
    'description' => 'Configure LTI context to global role mapping.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_lti_tool_provider_global_roles'),
    'access arguments' => array('administer lti_tool_provider module'),
    'weight' => -5,
  );
  if (module_exists('og')) {
    $items['admin/config/lti-tool-provider/group-mapping'] = array(
      'title' => 'Group Mapping',
      'description' => 'Configure LTI context to Drupal group mapping.',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('_lti_tool_provider_group_mapping'),
      'access arguments' => array('administer lti_tool_provider module'),
      'weight' => -4,
    );
  }
  $items['admin/config/lti-tool-provider/info'] = array(
    'title' => 'View LTI Information',
    'description' => 'View all the LTI context variables.',
    'page callback' => '_lti_tool_provider_info',
    'access arguments' => array('view lti info'),
    'weight' => -3,
  );
  $items['lti'] = array(
    'title' => 'LTI',
    'page callback' => '_lti_tool_provider_launch',
    'page arguments' => array('0'),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['lti-tool-provider/return'] = array(
    'title' => 'Return to LMS',
    'title callback' => '_lti_tool_provider_return_title',
    'page callback' => '_lti_tool_provider_return',
    'page arguments' => array('0'),
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );
  $items['lti-tool-provider/home'] = array(
    'title' => 'Home',
    'title callback' => '_lti_tool_provider_home_title',
    'page callback' => '_lti_tool_provider_home',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'user-menu',
  );
  $items['lti-tool-provider/info'] = array(
    'title' => 'LTI Info',
    'description' => 'View all the LTI context variables.',
    'page callback' => '_lti_tool_provider_info',
    'access arguments' => array('view lti info'),
    'type' => MENU_NORMAL_ITEM,
    'menu_name' => 'navigation',
  );
  return $items;
}

/**
 * Implements the [base_url]/lti path which is called to launch the tool from the LMS
 *  - Verifies the request using OAuth and adds the lti context_info to the session
 *  - Authenticates the user, possibly after provisioning the account
 *  - Authorises the user via global role mapping
 *  - If OG is configured a course may be provisioned from the context_info and group roles are mapped
 *  - Finally the destination is calculated and user is redirected there.
 */
function _lti_tool_provider_launch() {
  global $user;
  // If not an LTI launch request, then ignore
  if (!_is_basic_lti_request()) {
    drupal_set_message(t('Not a LTI request.'), 'info');
    return 'Error: Not a LTI request.';
  }
  // Insure we have a valid context
  if (empty($_REQUEST['oauth_consumer_key'])) {
    unset($_SESSION['_ltitp_context_info']);
    drupal_set_message(t('Not a valid LTI context.'), 'info');
    return 'Error: Invalid context. Missing oauth_consumer_key in request';
  }
  // Begin a new session based on this LTI launch request
  drupal_session_start();
  $oauth_consumer_key = $_REQUEST["oauth_consumer_key"];
  // Verify the message signature
  $store = new LTIToolProviderOAuthDataStore();
  $server = new OAuthServer($store);
  $method = new OAuthSignatureMethod_HMAC_SHA1();
  $server->add_signature_method($method);
  $request = OAuthRequest::from_request();
  try {
    $server->verify_request($request);
    // This is a LTI launch request
  } catch (Exception $e) {
    drupal_set_message($e->getMessage(), 'error');
    return 'Error: Invalid context, OAuth failure.';
  }
  // Collect the launch information for later storage in the session
  $launch_info = array('oauth_consumer_key' => $oauth_consumer_key);
  foreach ($_POST as $key => $value) {
    if ($key == 'basiclti_submit') continue;
    if (strpos($key, 'oauth_') === FALSE ) {
      $launch_info[$key] = $value;
      continue;
    }
  }
  $domain = retrieve_consumer_domain($oauth_consumer_key);
  if (isset($launch_info['context_id']) && isset($launch_info['user_id'])) {
    $lti_user = $launch_info['user_id'] . $domain;
  }
  else {
    $lti_user = 'lti_user' . $domain;
  }
  // Revalidate incoming user
  if ($user->uid > 0 && $user->name != $lti_user) {
    // Log out prior user and clear session, retaining lti session variables
    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
    module_invoke_all('user_logout', $user);
    // Destroy the current session, and reset $user to the anonymous user
    session_destroy();
    drupal_session_start();
    drupal_set_message(t('Logged current user out.'), 'info');
  }
  if ($user->uid == 0) {
    // Unauthenticated so create user if necessary
    if ($account = user_load_by_name($lti_user)) {
      // User exists
      if ($account->uid == 1) {
        drupal_set_message(t('Admin account must use Drupal authentication.'), 'error');
        return;  // User 1 must use drupal authentication
      }
    }
    else {
      // Provision a user account for $lti_user
      if (!isset($launch_info['lis_person_contact_email_primary'])) {
        if ($domain == '') {
          $email = $lti_user . '@example.com';
        }
        else {
          $email = $lti_user . '.example.com';
        }
      }
      else {
        $email = $launch_info['lis_person_contact_email_primary'];
      }
      $user_attribute_settings = variable_get('lti_tool_provider_name_field_setting', array());
      $fields = retrieve_user_field_types('TEXT');
      $userinfo = array(
        'name' => $lti_user,
        'pass' => user_password(20),
        'init' => $email,
        'mail' => $email,
        'status' => 1,
        'access' => REQUEST_TIME,
      );
      foreach ($user_attribute_settings as $variable => $field) {
        if (($field != 'none') && isset($fields[$field]) && isset($launch_info[$variable])) {
          $userinfo[$field] = array(LANGUAGE_NONE => array('0' => array('value' => $launch_info[$variable])));
        }
      }
      if (!$account = user_save(drupal_anonymous_user(), $userinfo)) {
        drupal_set_message(t('User account creation failed because of system problems.'), 'error');
        return;
      }
      drupal_set_message(t('User account created.'), 'info');
    }
  }
  else {
    $account = user_load($user->uid);
  }
  // $account is the $lti_user
  // Map Drupal global roles based on the user LTI role
  if (isset($launch_info['roles'])) {
    _assign_global_roles_to_user($launch_info['roles'], $account->uid);
  }
  $destination = '';
  // Map Group roles based on the user LTI role
  if (module_exists('og')) {
    $selected_group_bundle = variable_get('lti_tool_provider_bundle');
    if ($selected_group_bundle != 'none:None') {
      // Grant Group Membership and Group Role.
      $users_groups = og_get_entity_groups('user', $account->uid);
      // Find the group that matches the lti context_label.
      $course_found = FALSE;
      list($group_entity, $group_bundle) = explode(':', variable_get('lti_tool_provider_bundle'));
      //     $fields = retrieve_entity_field_types($selected_group_bundle);
      $saved_settings = variable_get('lti_tool_provider_context_mapping_setting' , array());
      $mapping_field = $saved_settings['context_id'];

      foreach (og_get_all_group($group_entity) as $key => $group_id) {
        $group_wrapper = entity_metadata_wrapper($group_entity, $group_id);
        $fields = $group_wrapper->getPropertyInfo();
        if (isset($fields[$mapping_field]) && $group_wrapper->{$mapping_field}->value() == $launch_info['context_id']) {
          $course_found = TRUE;
          $launch_info['course_entity_type'] = $group_entity;
          $launch_info['course_entity_eid'] = $group_id;
          // Found the group that matches the context_id. Add the user to the group.
          if (!array_key_exists($group_entity, $users_groups) || !in_array($group_id, $users_groups[$group_entity])) {
            og_group($group_entity, $group_id, array('entity_type' => 'user', 'entity' => $account->uid, 'field_name' => FALSE, 'state' => OG_STATE_ACTIVE));
          }
          if (isset($launch_info['roles'])) {
            $found_roles = _lti_tool_provider_search_roles($launch_info['roles']);
            foreach ($found_roles as $lti_role => $found_role) {
              og_role_grant($group_entity, $group_id, $account->uid, $found_role);
            }
          }
        }
      }
      // FIX THIS does not cope with non-node group bundles
      if (!$course_found && ($launch_info['context_id'] != NULL) && (variable_get('lti_tool_provider_provision_groups') == 1) && (user_access('create ' . $group_bundle . ' content', $account))) {
        $node = new stdClass();
        $node->type = $group_bundle;
        node_object_prepare($node);
        $saved_settings = variable_get('lti_tool_provider_context_mapping_setting' , array());
        foreach ($saved_settings as $variable => $field) {
          if ($field != 'none') {
            if ($field != 'title') {
              foreach (field_info_instances($group_entity, $group_bundle) as $entity_field) {
                if (($field == $entity_field['field_name']) && (strcasecmp($entity_field['widget']['module'], 'text') == 0)) {
                  $node->{$field}[LANGUAGE_NONE][0]['value'] = $launch_info[$variable];
                }
              }
            }
            else {
              $node->$field = $launch_info[$variable];
            }
          }
        }
        node_save($node);
        $group_nid = $node->nid;
        $launch_info['course_entity_type'] = $group_entity;
        $launch_info['course_entity_eid'] = $group_nid;
      }
      if (isset($launch_info['course_entity_eid'])) {
        $destination = $launch_info['course_entity_type'] . '/' . $launch_info['course_entity_eid'];
      }
      else {
        drupal_set_message(check_plain('No course corresponding to ' . $launch_info['context_label'] . ' exists.'));
      }
    }
  }
  // If unauthenticated, log user in
  if ($user->uid == 0) {
    $form_state = array('uid' => $account->uid);
    user_login_submit(array(), $form_state);
  }
  // Save launch information in session
  $_SESSION['_ltitp_context_info'] = $launch_info;
  // Go to the required destination
  if (key_exists('custom_destination', $launch_info)) {
    $destination .= '/' . $launch_info['custom_destination'];
  }
  module_invoke_all('lti_launch', $launch_info);
  drupal_goto($destination);
}

/**
 * Map the new user to a drupal Global role based on his/her role in the LTI context
 *
 * @param $lti_role
 *   The string representing the lti_role
 * @param $uid
 *   The id of the user to assign the role
 */
function _assign_global_roles_to_user($lti_roles, $uid) {
  $select_roles = user_roles(TRUE, NULL);
  $global_role_array = variable_get('lti_tool_provider_global_role_array');
  $roles = explode(',', $lti_roles);
  foreach ($roles as $key => $raw_role) {
    $lti_role = end(explode('/', end(explode(':', $raw_role))));
    // Check if the mapped global role exists
    if (isset($select_roles[$global_role_array[$lti_role]])) {
      user_multiple_role_edit(array($uid), 'add_role', $global_role_array[$lti_role]);
    }
  }
}

/**
 * Return an arrary of group roles that are mapped from a string of LTI roles
 */
function _lti_tool_provider_search_roles($lti_roles_str)  {
  $found_roles = array();
  $group_role_array = variable_get('lti_tool_provider_group_role_array');
  $lti_roles = explode(',', $lti_roles_str);
  foreach ($lti_roles as $raw_lti_role)  {
    $lti_role_exploded = explode('/', $raw_lti_role);
    if (count($lti_role_exploded) >= 3)  {
      $lti_role = $lti_role_exploded[2];
    }
    else  {
      $lti_role = $lti_role_exploded[0];
    }
    if (isset($group_role_array[$lti_role]))  {
      $found_roles[$lti_role] = $group_role_array[$lti_role];
    }
    else  {
      drupal_set_message(t('Role ' . check_plain($lti_role) . ', not found.'), 'warning');
    }
  }
  return $found_roles;
}
/**
 * Menu title callback for the lti return menu item
 */
function _lti_tool_provider_return_title($title) {
  if (isset($_SESSION['_ltitp_context_info'])) {
    if (key_exists('custom_return_label', $_SESSION['_ltitp_context_info'])) {
      return $_SESSION['_ltitp_context_info']['custom_return_label'];
    }
    return 'Return to LMS';
  }
}

/**
 * Page callback for the lti return menu item
 *  - Logout the user and redirect to the return url in the ltitp_context_info
 */
function _lti_tool_provider_return($arg) {
  global $user;
  // If in a lti context log user out and return to launch presentation, otherwise just logout.
  if (isset($_SESSION['_ltitp_context_info'])) {
    $url = $_SESSION['_ltitp_context_info']['launch_presentation_return_url'];
    watchdog('user', 'Session closed for %name.', array('%name' => $user->name));
    module_invoke_all('user_logout', $user);
    // Destroy the current session, and reset $user to the anonymous user
    session_destroy();
    drupal_goto($url);
  }
  else {
    drupal_goto('user/logout');
  }
}

/**
 * Menu title callbach for the LTI Home menu item
 */
function _lti_tool_provider_home_title($title) {
  if (isset($_SESSION['_ltitp_context_info'])) {
    if (key_exists('custom_destination_label', $_SESSION['_ltitp_context_info'])) {
      return $_SESSION['_ltitp_context_info']['custom_destination_label'];
    }
    else {
      if (key_exists('resource_link_title', $_SESSION['_ltitp_context_info'])) {
        return $_SESSION['_ltitp_context_info']['resource_link_title'];
      }
    }
  }
  return 'Home';
}

/**
 * Menu page callbach for the LTI Home menu item
 *  - If in a lti context return to group home page + custom destination, otherwise just the site home
 */
function _lti_tool_provider_home() {
  $destination = '';
  if (isset($_SESSION['_ltitp_context_info'])) {
    if (key_exists('course_entity_type', $_SESSION['_ltitp_context_info'])) {
      $destination = $_SESSION['_ltitp_context_info']['course_entity_type'] . '/' . $_SESSION['_ltitp_context_info']['course_entity_eid'];
    }
    if (key_exists('custom_destination', $_SESSION['_ltitp_context_info'])) {
      $destination .= '/' . $_SESSION['_ltitp_context_info']['custom_destination'];
    }
  }
  drupal_goto($destination);
}

/**
 * Menu page callbach for the LTI Info menu items
 *  - Displays all the key/value pairs in the ltitp_context_info
 */
function _lti_tool_provider_info() {
  module_invoke_all('lti_return');
  $content = array();
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('LTI Context Session Variables'),
  );
  if (isset($_SESSION['_ltitp_context_info'])) {
    $info = $_SESSION['_ltitp_context_info'];
    $rows = array();
    $loop_counter = 0;
    foreach ($info as $key => $value) {
      $rows[$loop_counter]['data']['key'] = $key;
      $rows[$loop_counter]['data']['value'] = $value;
      $loop_counter ++;
    }
    $content['table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('Key'), t('Value')),
    );
  }
  else {
    $content['table'] = array(
      '#type' => 'item',
      '#markup' => t('There is no LTI Context'),
    );
  }
  return $content;
}

/**
 * Menu page callback to configure settings for mapping user attributes from the LTI context variables
 */
function _lti_tool_provider_user_attributes($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('LTI Context to User Attribute Mapping'),
    '#description' => 'Select the user attributes to be mapped from each LTI context variable',
  );
  $fields_array = retrieve_user_field_types('TEXT');
  $lis_list = lti_tool_provider_user_mapping_lis_details();
  $saved_settings = variable_get('lti_tool_provider_name_field_setting', array());
  $form['mapping'] = array(
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => array(t('LTI Context Variable'), t('User Attribute')),
    '#rows' => array(),
  );
  foreach ($lis_list as $detail) {
    $variable = array(
      '#type' => 'item',
      '#title' => check_plain($detail),
    );
    $value = $saved_settings[$detail];
    $attribute = array(
      '#type' => 'select',
      '#options' => $fields_array,
      '#default_value' => $value,
    );
    $form['mapping'][] = array(
      'variable' => &$variable,
      'attribute' => &$attribute,
    );
    $form['mapping']['#rows'][] = array(
      array('data' => &$variable),
      array('data' => &$attribute),
    );
    unset($variable);
    unset($attribute);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save User Attributes'),
    '#submit' => array('_lti_tool_provider_user_attributes_submit'),
  );
  return $form;
}

function _lti_tool_provider_user_attributes_validate($form, &$form_state) {
  $check = TRUE;
  $lis_list = lti_tool_provider_user_mapping_lis_details();
  $field_options = retrieve_user_field_types('TEXT');
  $counters = array();
  foreach ($field_options as $field => $desc) {
    $counters[$field] = 0;
  }
  foreach ($lis_list as $key => $variable) {
    $counters[$form_state['values']['mapping'][$key]['attribute']]++;
  }
  foreach ($field_options as $field => $desc) {
    if ($field != 'none' && $counters[$field] > 1) {
      $check = FALSE;
      break;
    }
  }
  if (!$check) {
    form_set_error('', t('You may not map multiple values to the same attribute.'));
  }
}

function _lti_tool_provider_user_attributes_submit($form, &$form_state) {
  $lis_list = lti_tool_provider_user_mapping_lis_details();
  $settings = array();
  foreach ($lis_list as $key => $lis) {
    $setting[$lis] = $form_state['values']['mapping'][$key]['attribute'];
  }
  variable_set('lti_tool_provider_name_field_setting', $setting);
  drupal_set_message(t('User attribute mapping saved.'));
}

function _lti_tool_provider_global_roles($form, &$form_state) {
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Map LTI Roles to Global Drupal Roles'),
    '#description' => t('Map each LTI role to a global Drupal role.'),
  );
  $select_roles = user_roles(TRUE, NULL);
  $old_role_array = variable_get('lti_tool_provider_global_role_array');
  $form['roles'] = array(
    '#tree' => TRUE,
    '#theme' => 'table',
    '#header' => array(t('LTI Roles'), t('Global Roles')),
    '#rows' => array(),
  );
  foreach (lti_tool_provider_get_lti_roles() as $role) {
    $lti_role = array(
      '#type' => 'item',
      '#title' => check_plain($role),
    );
    $global_role = array(
      '#type' => 'select',
      '#options' => $select_roles,
    );
    if (isset($old_role_array[$role]) && isset($select_roles[$old_role_array[$role]])) {
      $global_role['#default_value'] = $old_role_array[$role];
    }
    else {
      $global_role['#default_value'] = array_search(DRUPAL_AUTHENTICATED_RID, $select_roles);
    }
    $form['roles'][] = array(
      'lti_role' => &$lti_role,
      'global_role' => &$global_role,
    );
    $form['roles']['#rows'][] = array(
      array('data' => &$lti_role),
      array('data' => &$global_role),
    );
    unset($lti_role);
    unset($global_role);
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Global Roles'),
    '#submit' => array('_lti_tool_provider_global_roles_submit'),
  );
  return $form;
}

function _lti_tool_provider_global_roles_submit($form, &$form_state) {
  $settings = array();
  foreach (lti_tool_provider_get_lti_roles() as $key => $role) {
    $settings[$role] = $form_state['values']['roles'][$key]['global_role'];
  }
  variable_set('lti_tool_provider_global_role_array', $settings);
  drupal_set_message(t('LTI global roles mapping saved.'));
}

function _lti_tool_provider_group_mapping($form, &$form_state)  {
  $form = array();
  $bundles = og_get_all_group_bundle();
  $form['description'] = array(
    '#type' => 'item',
    '#title' => t('Step 1: Select group bundle and configure LTI context variable to group attribute mapping.'),
    '#weight' => -8,
  );
  $new_bundles = _lti_tool_provider_bundles_change_key($bundles);
  $old_bundle = variable_get('lti_tool_provider_bundle');
  $form['bundle'] = array(
    '#type' => 'select',
    '#title' => t('LTI Context to Drupal group mapping'),
    '#description' => 'Please select the Drupal group bundle corresponding to an LTI course.',
    '#options' => $new_bundles,
    '#weight' => -7,
    '#ajax' => array(
      'callback' => '_group_select_callback',
      'wrapper' => 'group-detail',
      'method' => 'replace',
      'effect' => 'fade',
    ),
  );
  // The group_detail section of the form is ajax reloaded when the bundle or the creat_course checkbox changes
  $form['bundle']['#default_value'] = isset($form_state['values']['bundle']) ? $form_state['values']['bundle'] : $old_bundle;
  $is_node_type = (reset(explode(':', $form['bundle']['#default_value'])) == 'node') ? TRUE : FALSE;
  $form['group_detail'] = array(
    '#prefix' => '<div id="group-detail">',
    '#suffix' => '</div>',
    '#weight' => -6,
  );
  if (!empty($form['bundle']['#default_value']) && $form['bundle']['#default_value'] != 'none:None') {
    if ($is_node_type) {
      $form['group_detail']['create_course'] = array(
        '#type' => 'checkbox',
        '#title' => t('Automatically create groups. Note: Only available for node group bundles and LTI user must have appropriate "Create content type" permission.'),
        '#default_value' => isset($form_state['values']['create_course']) ? $form_state['values']['create_course'] : variable_get('lti_tool_provider_provision_groups'),
        '#weight' => -5,
        '#ajax' => array(
          'callback' => '_group_select_callback',
          'wrapper' => 'group-detail',
          'method' => 'replace',
          'effect' => 'fade',
        ),
      );
    }
    $form['group_detail']['mapping_description'] = array(
      '#prefix' => '<div id="select-mapping-div">',
      '#suffix' => '</div>',
      '#type' => 'item',
      '#title' => t('LTI group attribute mapping'),
      '#description' => 'Select the group attributes to be mapped from the LTI context variables. Note: Title and context_id must be mapped but not necessarily to each other.',
      '#weight' => -4,
    );
    if ($is_node_type && $form['group_detail']['create_course']['#default_value'] == 0) {
      $form['group_detail']['mapping_description']['#description'] = 'Select the group attribute to be mapped from the LTI context_id.';
    }
    $saved_settings = variable_get('lti_tool_provider_context_mapping_setting', array());
    $form['group_detail']['mapping'] = array(
      '#tree' => TRUE,
      '#theme' => 'table',
      '#header' => array(t('LTI Context Variable'), t('Group Attribute') ),
      '#rows' => array(),
      '#weight' => -1,
    );
    foreach (lti_tool_provider_context_mapping_details() as $key => $detail) {
      if ((!$is_node_type || $form['group_detail']['create_course']['#default_value'] == 0) && ($detail != 'context_id')) {
        unset($form_state['values']['mapping'][$key]);
      }
      else {
        $variable = array(
          '#type' => 'item',
          '#title' => check_plain($detail),
        );
        $attribute = array(
          '#type' => 'select',
          '#options' => retrieve_entity_field_types($form['bundle']['#default_value']),
        );
        if (isset($form_state['values'][$detail])) {
          $attribute['#default_value'] = $form_state['values'][$detail];
        }
        else {
          $attribute['#default_value'] = isset($saved_settings[$detail]) ? $saved_settings[$detail] : 0;
        }
        $form['group_detail']['mapping'][] = array(
          'variable' => &$variable,
          'attribute' => &$attribute,
        );
        $form['group_detail']['mapping']['#rows'][] = array(
          array('data' => &$variable),
          array('data' => &$attribute),
        );
        unset($variable);
        unset($attribute);
      }
    }
    $form['group_detail']['mapping']['#weight'] = -3;
    if ($form['bundle']['#default_value'] != 'none:None') {
      $form['group_detail']['roles_description'] = array(
        '#type' => 'item',
        '#title' => t('LTI group role mapping'),
        '#description' => 'Select the group roles to be mapped from the LTI roles.',
        '#weight' => -2,
      );
      list($entity, $bundle) = explode(':', $form['bundle']['#default_value']);
      $select_roles = og_roles($entity, $bundle);
      // Remove OG_ANONYMOUS_ROLE in $select_roles
      if (($key = array_search(OG_ANONYMOUS_ROLE, $select_roles)) !== FALSE) {
        unset($select_roles[$key]);
      }
      $old_bundle = variable_get('lti_tool_provider_bundle');
      if ($old_bundle == $form['bundle']['#default_value']) {
        $old_role_array = variable_get('lti_tool_provider_group_role_array');
      }

      $form['group_detail']['roles'] = array(
        '#tree' => TRUE,
        '#theme' => 'table',
        '#header' => array(t('LTI Roles'), t('Group Roles')),
        '#rows' => array(),
        '#weight' => -1,
      );
      foreach (lti_tool_provider_get_lti_roles() as $role) {
        $lti_role = array(
          '#type' => 'item',
          '#title' => check_plain($role),
        );
        $group_role = array(
          '#type' => 'select',
          '#options' => $select_roles,
        );
        if (isset($old_role_array[$role]) && isset($select_roles[$old_role_array[$role]])) {
          $group_role['#default_value'] = $old_role_array[$role];
        }
        else {
          $group_role['#default_value'] = array_search(DRUPAL_AUTHENTICATED_RID, $select_roles);
        }
        $form['group_detail']['roles'][] = array(
          'lti_role' => &$lti_role,
          'group_role' => &$group_role,
        );
        $form['group_detail']['roles']['#rows'][] = array(
          array('data' => &$lti_role),
          array('data' => &$group_role),
        );
        unset($lti_role);
        unset($group_role);
      }
    }
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Save Group Mapping',
    '#submit' => array('_lti_tool_provider_group_mapping_submit'),
    '#weight' => 10,
  );
  return $form;
}

function _group_select_callback($form, &$form_state) {
  return $form['group_detail'];
}

function _lti_tool_provider_group_mapping_validate($form, &$form_state) {
  $entity_bundle = $form_state['values']['bundle'];
  list($entity, $bundle) = explode(':', $entity_bundle);
  $check_isset_title = FALSE;
  $check_isset_context_id = FALSE;
  $check_repeat = FALSE;
  $fields = retrieve_entity_field_types($entity_bundle);
  $counters = array();
  foreach (lti_tool_provider_context_mapping_details() as $key => $detail) {
    if (isset($form_state['values']['mapping'][$key]['attribute'])) {
      if ($detail != 'context_type' && $form_state['input']['mapping'][$key]['attribute'] == 'title') {
        $check_isset_title = TRUE;
      }
      if ($detail == 'context_id' && $form_state['input']['mapping'][$key]['attribute'] != 'none') {
        $check_isset_context_id = TRUE;
      }
      $value = $form_state['input']['mapping'][$key]['attribute'];
      isset($counters[$value]) ? $counters[$value]++ : 0;
    }
  }
  foreach ($counters as $counter => $count) {
    if ($counter != 'none' && $count > 1) {
      $check_repeat = TRUE;
      break;
    }
  }
  if (!$check_isset_context_id) {
    form_set_error('group_detail', t('You must map context_id variable to a field.'));
  }
  if ($check_repeat) {
    form_set_error('group_detail', t('You may not map more than one variable to the same field.'));
  }
  if ($entity == 'node' && isset($form_state['values']['create_course']) && $form_state['values']['create_course'] == 1 && !$check_isset_title) {
    form_set_error('group_detail', t('Title must be mapped from one of context_id, context_label or context_title.'));
  }
}

function _lti_tool_provider_group_mapping_submit($form, &$form_state) {
  variable_set('lti_tool_provider_bundle', $form_state['values']['bundle']);
  if ($form_state['values']['bundle'] == 'none:None') {
    variable_set('lti_tool_provider_provision_groups', 0);
  }
  else {
    variable_set('lti_tool_provider_provision_groups', $form_state['values']['create_course']);
    $settings = array();
    foreach (lti_tool_provider_context_mapping_details() as $key => $detail) {
      if (isset($form_state['input']['mapping'][$key]['attribute'])) {
        $settings[$detail] = $form_state['input']['mapping'][$key]['attribute'];
      }
    }
    variable_set('lti_tool_provider_context_mapping_setting', $settings);
    $group_roles = array();
    foreach (lti_tool_provider_get_lti_roles() as $key => $role) {
      $group_roles[$role] = $form_state['input']['roles'][$key]['group_role'];
    }
    variable_set('lti_tool_provider_group_role_array', $group_roles);
  }
  drupal_set_message(t('LTI group mapping saved.'));
}

/**
 * Returns TRUE if this is a Basic LTI message with minimum values to meet the protocol
 */
function _is_basic_lti_request() {
  $good_message_type = array_key_exists('lti_message_type', $_REQUEST) ? $_REQUEST["lti_message_type"] : "basic-lti-launch-request";
  $good_lti_version = array_key_exists('lti_version', $_REQUEST) ? $_REQUEST["lti_version"] : "LTI-1p0";
  $resource_link_id = array_key_exists('resource_link_id', $_REQUEST) ? $_REQUEST["resource_link_id"] : NULL;
  if ($good_message_type and $good_lti_version and isset($resource_link_id)) return TRUE;
  return FALSE;
}

function _lti_tool_provider_bundles_change_key($bundles)  {
  $new_bundles = array();
  $new_bundles['none']['none' . ':' . 'None'] = 'None';
  foreach ($bundles as $entity => $bundle)  {
    foreach ($bundle as $key => $value)  {
      $new_bundles[$entity][$entity . ':' . $key] = $value;
    }
  }
  return $new_bundles;
}

function lti_tool_provider_get_lti_roles()  {
  return  array(
    'Learner',
    'Instructor',
    'ContentDeveloper',
    'Member',
    'Manager',
    'Mentor',
    'Administrator',
    'TeachingAssistant',
  );
}

function lti_tool_provider_user_mapping_lis_details() {
  return array(
    'lis_person_name_given',
    'lis_person_name_family',
    'lis_person_name_full',
  );
}

function lti_tool_provider_context_mapping_details() {
  return array(
    'context_id',
    'context_label',
    'context_title',
    'context_type',
  );
}

function lti_tool_provider_roles_array($values)  {
  $arr = array();
  foreach (lti_tool_provider_get_lti_roles() as $role)  {
    $arr[$role] = $values[$role];
  }
  return $arr;
}

function retrieve_entity_field_types($group_bundle) {
  list($entity, $bundle) = explode(':', $group_bundle);
  $fields = field_info_instances($entity, $bundle);
  $result = array('none' => 'None');
  if ($entity == 'node') {
    $result['title'] = 'Title';
  }
  foreach ($fields as $field) {
    $result[$field['field_name']] = $field['label'] . ' (' . $field['field_name'] . ')';
  }
  return $result;
}

/**
 * Retrieve the field labels and types from the user entity as an array suitable for a select list
 *
 * @param $filter
 *   The string which represent the type of field to retrieve
 * @return
 *   An array containing all the retrieved fields
 */
function retrieve_user_field_types($filter = 'TEXT') {
  $entites = field_info_instances('user');
  $result = array('none' => 'None');
  foreach ($entites['user'] as $field) {
    if (strcasecmp($field['widget']['module'], $filter) == 0) {
      $result[$field['field_name']] = $field['label'] . ' (' . $field['field_name'] . ')';
    }
  }
  return $result;
}

interface LTITPConsumerEntityControllerInterface
extends DrupalEntityControllerInterface {
  public function create();
  public function save($entity);
  public function delete($entity);
}

class LTITPConsumerEntityController
extends DrupalDefaultEntityController
implements LTITPConsumerEntityControllerInterface {
  public function create() {
    $entity = new stdClass();
    $entity->ltitp_consumer_entity_id = 0;
    $entity->ltitp_consumer_entity_key = '';
    $entity->ltitp_consumer_entity_secret = '';
    $entity->ltitp_consumer_entity_consumer = '';
    $entity->ltitp_consumer_entity_domain = '';
    $entity->ltitp_consumer_entity_dummy_pref = FALSE;
    $extra_cols = getExtraColumns('ltitp_consumer_entity');
    foreach ($extra_cols as $col) {
      $entity->$col = '';
    }
    return $entity;
  }

  public function save($entity) {
    $transaction=db_transaction();
    try {
      $entity->is_new = empty($enity->ltitp_consumer_entity_id);
      if (empty($entity->date_joined)) {
        $entity->date_joined = REQUEST_TIME;
      }
      field_attach_presave('ltitp_consumer_entity', $entity);
      $primary_key = $entity->ltitp_consumer_entity_id ? 'ltitp_consumer_entity_id' : array();
      if (empty($primary_key)) {
        drupal_write_record('ltitp_consumer_entity', $entity);
        field_attach_insert('ltitp_consumer_entity', $entity);
        $op = 'insert';
      }
      else {
        drupal_write_record('ltitp_consumer_entity', $entity, $primary_key);
        $op = 'update';
      }
      $function = 'field_attach_' . $op;
      $function('ltitp_consumer_entity', $entity);
      module_invoke_all('entity_' . $op, $entity, 'ltitp_consumer_entity');
      unset($entity->is_new);
      db_ignore_slave();
      return $entity;
    }
    catch (Exception $e) {
      $transaction->rollback();
      drupal_set_message(t('%e', array('%e' => $entity->$e)));
      watchdog_exception('ltitp_consumer_entity', $e, NULL, WATCHDOG_ERROR);
      return FALSE;
    }
  }

  public function delete($entity) {
    $this->delete_multiple(array($entity));
  }

  public function delete_multiple($entities) {
    $ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          module_invoke_all('ltitp_consumer_entity_delete', $entity);
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'ltitp_consumer_entity');
          field_attach_delete('ltitp_consumer_entity', $entity);
          $ids[] = $entity->ltitp_consumer_entity_id;
        }
        db_delete('ltitp_consumer_entity')
        ->condition('ltitp_consumer_entity_id', $ids, 'IN')
        ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('ltitp_consumer_entity', $e);
        throw $e;
      }
    }
  }
}

function ltitp_consumer_entity_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('ltitp_consumer_entity')->create();
  return drupal_get_form('ltitp_consumer_entity_form', $entity);
}

function ltitp_consumer_entity_save(&$entity) {
  return entity_get_controller('ltitp_consumer_entity')->save($entity);
}

function ltitp_consumer_entity_delete($entity) {
  entity_get_controller('ltitp_consumer_entity')->delete($entity);
}

function ltitp_consumer_entity_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = ltitp_consumer_entity_load_multiple();
  $entity_type = 'ltitp_consumer_entity';
  $header = array(t('ID'), t('Consumer'), t('Key'), t('Secret'), t('Domain'), t('Dummy Account Prefrence'), t('Date Joined'));
  if (!empty($entities)) {
    $loop_counter = 0;
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[$loop_counter] = array(
        'data' => array(
          'id' => $entity->ltitp_consumer_entity_id,
          //'Consumer' => $entity->ltitp_consumer_entity_consumer,
          //This statement can create url to view individual keys
          'Consumer' => l($entity->ltitp_consumer_entity_consumer, 'admin/config/lti-tool-provider/lti-tool-consumers/view/' . $entity->ltitp_consumer_entity_id),
          'Key' => $entity->ltitp_consumer_entity_key,
          'Secret' => $entity->ltitp_consumer_entity_secret,
          'Domain' => $entity->ltitp_consumer_entity_domain,
          'Dummy_Pref' => trans_bool($entity->ltitp_consumer_entity_dummy_pref),
          'Date Joined' => format_date($entity->date_joined),
        ),
      );

      $extra_cols = getExtraColumns($entity_type);
      if (isset($extra_cols)) {
        foreach ($extra_cols as $col) {
          if (!isset($entity->$col)) {
            $value = 'Not avaliable';

          }
          else {
            $value = $entity->$col;
          }
          $rows[$loop_counter]['data'][getColumnDesc($entity_type, $col)] = $value;
        }
      }
      $loop_counter ++;
    }
    if (isset($extra_cols)) {
      foreach ($extra_cols as $col) {
        $header[] = t(getColumnDesc($entity_type, $col));
      }
    }
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => $header,
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No LTITP Consumer entities currently exist.'),
    );
  }
  return $content;
}

function ltitp_consumer_entity_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $obj = ltitp_consumer_entity_load_multiple($ids, $reset);
  return $obj ? reset($obj) : FALSE;
}

function ltitp_consumer_entity_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('ltitp_consumer_entity', $ids, $conditions, $reset);
}

/**
 * Provide a method to call, so as to validate
 * the key and secret of the consumer
 *
 * @param $consumer
 *   The consumer string which represents the consumer
 * @param $key
 *   The key string
 * @param $secret
 *   The secret string
 * @return
 *   A boolean which determines the result of validation
 */
function validate_consumer($consumer, $key, $secret) {
  $content = array();
  $entities = ltitp_consumer_entity_load_multiple();
  if (!empty($entities)) {
    foreach ( $entities as $entity ) {
      if ($key == $entity->ltitp_consumer_entity_key && $secret == $entity->ltitp_consumer_entity_secret && $consumer == $entity->ltitp_consumer_entity_consumer) {
        return TRUE;
      }
    }
  }
  return FALSE;
}

/**
 * Provide a function to generate dummy email
 * for the newly registered users
 *
 * @param $username
 *   The username of the user
 * @param $email
 *   The email of the user if there is
 * @return
 *   A string which is contains the email
 */
// function validate_email($username, $email, $domain) {
// 	if (empty($email)) {
// 		return $username. '@'.$domain.'.example.com';
// 	}
//  else {
// 		return $email;
// 	}
// }


/**
 * This function sole purpose is to retrieve all consumer secrets from the database
 *
 */
function retrieve_consumer_secrets() {
  $entites = ltitp_consumer_entity_load_multiple();
  $list = array();
  foreach ($entites as $entity) {
    $list[] = $entity ->ltitp_consumer_entity_secret ;
  }
  return $list;
}

function retrieve_consumer_domain($key) {
  $query = new EntityFieldQuery();
  $query
  ->entityCondition('entity_type', 'ltitp_consumer_entity')
  ->propertyCondition('ltitp_consumer_entity_key', $key);
  $result = $query->execute();
  $domain = NULL;
  if (!empty($result['ltitp_consumer_entity'])) {
    $entities = entity_load('ltitp_consumer_entity', array_keys($result['ltitp_consumer_entity']));
    foreach ($entities as $entity) {
      if ($entity->ltitp_consumer_entity_domain == '') {
        $domain = '';
      }
      else {
        $domain = '@' . $entity->ltitp_consumer_entity_domain;
      }
    }
  }
  if ($domain == NULL) {
    $domain = '';
  }
  return $domain;
}

function retrieve_consumer_id($key) {
  $query = new EntityFieldQuery();
  $query
  ->entityCondition('entity_type', 'ltitp_consumer_entity')
  ->propertyCondition('ltitp_consumer_entity_key', $key);
  $result = $query->execute();
  $id = NULL;
  if (!empty($result['ltitp_consumer_entity'])) {
    $entities = entity_load('ltitp_consumer_entity', array_keys($result['ltitp_consumer_entity']));
    foreach ($entities as $entity) {
      $id = $entity->ltitp_consumer_entity_id;
    }
  }
  if ($id == NULL) {
    $id = 1;
  }
  return $id;
}

function createAllDummyAccount() {
  $entities = ltitp_consumer_entity_load_multiple();
  $results_arr = array();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      $dummyname = 'lti_user@' . $entity-> ltitp_consumer_entity_domain;
      $email = $dummyname . 'example.com';
      // Check if the dummy account exist
      $query = new EntityFieldQuery();
      $query
      ->entityCondition('entity_type', 'user')
      ->propertyCondition('name', $dummyname);
      $result = $query->execute();
      $entity_type = 'user';
      $uid = NULL;
      if (!empty($result[$entity_type])) {
        $users = entity_load($entity_type, array_keys($result[$entity_type]));
        foreach ($users as $user) {
          $uid = $user->uid;
          $results_arr[] = $uid;
        }
      }
      if ($uid == NULL) {
        // Create user with the authenticated roles
        $userinfo = array(
          'name' => $dummyname,
          'pass' => user_password(20),
          'init' => $email,
          'mail' => $email,
          'status' => 1,
          'access' => REQUEST_TIME,
        );
        $account = user_save(drupal_anonymous_user(), $userinfo);
        user_multiple_role_edit(array($account->uid), 'add_role', 2);
        $results_arr[] = $uid;
      }
    }
    return $results_arr[] = $uid;
  }
}

function removeDummyAccount($domain = NULL) {
  $dummy_acc_arr = array();
  $query = new EntityFieldQuery();
  if ($domain == NULL) {
    $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('name', 'lti_user', 'STARTS_WITH');
  }
  else {
    $query
    ->entityCondition('entity_type', 'user')
    ->propertyCondition('name', 'lti_user' . $domain, '=');
  }
  $result = $query->execute();
  $entity_type = 'user';
  $uid = NULL;
  if (!empty($result[$entity_type])) {
    $users = entity_load($entity_type, array_keys($result[$entity_type]));
    foreach ($users as $user) {
      $uid = $user->uid;
      $dummy_acc_arr[] = $uid;
    }
  }
  user_delete_multiple($dummy_acc_arr);
  return $dummy_acc_arr;
}

function createDummyAccount($domain) {
  if ($account = user_load_by_name('lti_user' . $domain)) {
    return $account->uid;
  }
  else {
    $dummyname = 'lti_user' . $domain;
    $email = $dummyname . 'example.com';
    // Create user with the authenticated roles
    $userinfo = array(
      'name' => $dummyname,
      'pass' => user_password(20),
      'init' => $email,
      'mail' => $email,
      'status' => 1,
      'access' => REQUEST_TIME,
    );
    $account = user_save(drupal_anonymous_user(), $userinfo);
    // Add default (drupal authenticated role)
    user_multiple_role_edit(array($account->uid), 'add_role', 2);
    return $account->uid;
  }
}

function trans_bool($bool) {
  if ($bool == 1) {
    return 'On';
  }
  else {
    return 'Off';
  }
}

function getExtraColumns($schema) {
  $extra_col = array();
  $schema = drupal_get_schema('ltitp_consumer_entity');
  $fields = $schema['fields'];
  foreach ($fields as $field => $value) {
    if ($field != 'ltitp_consumer_entity_id' && $field != 'ltitp_consumer_entity_key' && $field != 'ltitp_consumer_entity_secret' && $field != 'ltitp_consumer_entity_consumer' && $field != 'ltitp_consumer_entity_domain' && $field != 'ltitp_consumer_entity_dummy_pref' && $field != 'date_joined') {
      $extra_col[] = $field;
    }
  }
  return $extra_col;
}

function getColumnDesc($schema, $col) {
  $extra_col = array();
  $schema = drupal_get_schema('ltitp_consumer_entity');
  $fields = $schema['fields'];
  foreach ($fields as $field => $value) {
    if ($col == $field) {
      return $fields[$field]['description'];
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function lti_tool_provider_entity_info() {
  $return = array(
    'ltitp_consumer_entity' => array(
      'label' => t('LTITP Consumer'),
      'controller class' => 'LTITPConsumerEntityController',
      'base table' => 'ltitp_consumer_entity',
      'fieldable' => TRUE,
      'entity keys' => array(
        'id' => 'ltitp_consumer_entity_id',
      ),
      'static cache' => TRUE,
      'view modes' => array(
        'full' => array(
          'label' => t('Default'),
          'custom settings' => FALSE,
        ),
      ),
      'label callback' => 'ltitp_consumer_entity_label',
      'uri callback' => 'ltitp_consumer_entity_uri',
      'module' => 'ltitp_consumer_entity',
      'access callback' => 'administer ltitp_consumer_entity entities',
    ),
  );
  return $return;
}

function ltitp_consumer_entity_uri($ltitp) {
  return array(
    'path' => 'admin/config/lti-tool-provider/lti-tool-consumer/view/' . $ltitp->id,
  );
}

function ltitp_consumer_entity_form($form, &$form_state, $entity) {
  $form['ltitp_consumer_entity_consumer'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer'),
    '#required' => TRUE,
    '#default_value' => $entity->ltitp_consumer_entity_consumer,
  );
  $form['ltitp_consumer_entity_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Key'),
    '#required' => TRUE,
    '#default_value' => $entity->ltitp_consumer_entity_key,
  );
  $form['ltitp_consumer_entity_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#required' => TRUE,
    '#default_value' => $entity->ltitp_consumer_entity_secret,
  );
  $form['ltitp_consumer_entity_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#required' => FALSE,
    '#default_value' => $entity->ltitp_consumer_entity_domain,
  );
  $form['ltitp_consumer_entity_dummy_pref'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use a dummy account for unidentified users'),
    '#default_value' => $entity->ltitp_consumer_entity_dummy_pref,
  );
  $form['ltitp_consumer_entity_id'] = array(
    '#type' => 'value',
    '#value' => $entity->ltitp_consumer_entity_id,
  );
  $form['ltitp_consumer_entity'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );
  field_attach_form('ltitp_consumer_entity', $entity, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  if (current_path() != "ltitp-consumer/add") {
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('ltitp_consumer_entity_edit_delete'),
      '#weight' => 200,
    );
  }
  return $form;
}

function ltitp_consumer_entity_form_validate($form, &$form_state) {
  $check_key = FALSE;
  $check_domain = FALSE;
  $new_consumer = $form_state['values']['ltitp_consumer_entity_id'];
  if ($new_consumer == 0) {
    // Create
    $query =new EntityFieldQuery();
    $query
    -> entityCondition('entity_type', 'ltitp_consumer_entity')
    -> propertyCondition('ltitp_consumer_entity_key', $form_state['values']['ltitp_consumer_entity_key']);
    $result = $query->execute();
    if (empty($result)) {
      $check_key = TRUE;
    }
    if ($form_state['values']['ltitp_consumer_entity_domain'] == '') {
      $check_domain = TRUE;
    }
    else {
      $query = new EntityFieldQuery();
      $query
      ->entityCondition('entity_type', 'ltitp_consumer_entity')
      ->propertyCondition('ltitp_consumer_entity_domain', $form_state['values']['ltitp_consumer_entity_domain']);
      $result = $query->execute();
      if (empty($result)) {
        $check_domain = TRUE;
      }
    }
  }
  else {
    // Edit or delete
    $query = new EntityFieldQuery();
    $query
    ->entityCondition('entity_type', 'ltitp_consumer_entity')
    ->propertyCondition('ltitp_consumer_entity_key', $form_state['values']['ltitp_consumer_entity_key'])
    ->propertyCondition('ltitp_consumer_entity_id', $form_state['values']['ltitp_consumer_entity_id'], '!=');
    $result = $query->execute();
    if (empty($result)) {
      $check_key = TRUE;
    }
    $query = new EntityFieldQuery();
    $query
    ->entityCondition('entity_type', 'ltitp_consumer_entity')
    ->propertyCondition('ltitp_consumer_entity_domain', $form_state['values']['ltitp_consumer_entity_domain'])
    ->propertyCondition('ltitp_consumer_entity_id', $form_state['values']['ltitp_consumer_entity_id'], '!=');
    $result = $query->execute();
    if (empty($result)) {
      $check_domain = TRUE;
    }
  }
  if ($check_key && $check_domain) {
    $submitted = (object) $form_state['values']['ltitp_consumer_entity'];
    field_attach_form_validate('ltitp_consumer_entity', $submitted, $form, $form_state);
  }
  elseif (!$check_key && !$check_domain) {
    form_set_error('', t('Keys and domains must be unique.'));
  }
  elseif (!$check_key) {
    form_set_error('', t('Keys must be unique.'));
  }
  elseif (!$check_domain) {
    form_set_error('', t('Domains must be unique.'));
  }
  $pattern ='/([A-Z0-9 _!@#$%=+*.?<>\/\r\n])/';
  $domain_char_check = preg_match($pattern, $form_state['values']['ltitp_consumer_entity_domain']);
  if ($domain_char_check) {
    form_set_error('', t('The domain must not contain numeric value, special characters, spaces and upper cases'));
  }
}

function ltitp_consumer_entity_form_submit($form, &$form_state) {
  $entity = $form_state['values']['ltitp_consumer_entity'];
  $entity->ltitp_consumer_entity_key = $form_state['values']['ltitp_consumer_entity_key'];
  $entity->ltitp_consumer_entity_secret = $form_state['values']['ltitp_consumer_entity_secret'];
  $entity->ltitp_consumer_entity_consumer = $form_state['values']['ltitp_consumer_entity_consumer'];
  $entity->ltitp_consumer_entity_domain = $form_state['values']['ltitp_consumer_entity_domain'];
  $entity->ltitp_consumer_entity_dummy_pref = $form_state['values']['ltitp_consumer_entity_dummy_pref'];
  if ($form_state['values']['ltitp_consumer_entity_dummy_pref']) {
    createDummyAccount($form_state['values']['ltitp_consumer_entity_domain']);
    drupal_set_message(t('Dummy user has been created'));
  }
  else {
    if ($form_state['values']['ltitp_consumer_entity_id'] != 0) {
      removeDummyAccount($form_state['values']['ltitp_consumer_entity_domain']);
      drupal_set_message(t('Dummy user has been removed'));
    }
  }
  field_attach_submit('ltitp_consumer_entity', $entity, $form, $form_state);
  $entity = ltitp_consumer_entity_save($entity);
  drupal_set_message(t('Configurations saved.'));
  $form_state['redirect'] = 'admin/config/lti-tool-provider/lti-tool-consumers';
}

function ltitp_consumer_entity_edit_delete( $form , &$form_state ) {
  $entity = $form_state['values']['ltitp_consumer_entity'];
  removeDummyAccount($entity ->ltitp_consumer_entity_domain);
  ltitp_consumer_entity_delete($entity);
  drupal_set_message(t('The entity %ltitp_consumer_entity_consumer (ID %ltitp_consumer_entity_id) has been deleted.',
  array('%ltitp_consumer_entity_consumer' => $entity->ltitp_consumer_entity_consumer, '%ltitp_consumer_entity_id' => $entity->ltitp_consumer_entity_id))
  );
  $form_state['redirect'] = 'admin/config/lti-tool-provider/lti-tool-consumers';
}

function ltitp_consumer_entity_view($entity, $view_mode = 'tweaky') {
  $entity_type = 'ltitp_consumer_entity';
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  field_attach_prepare_view($entity_type, array($entity->ltitp_consumer_entity_id => $entity),
  $view_mode);
  entity_prepare_view($entity_type, array($entity->ltitp_consumer_entity_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  $entity->content['ltitp_consumer_entity_consumer'] = array(
    '#type' => 'item',
    '#title' => t('Consumer'),
    '#markup' => $entity->ltitp_consumer_entity_consumer,
  );
  $entity->content['ltitp_consumer_entity_key'] = array(
    '#type' => 'item',
    '#title' => t('Key'),
    '#markup' => $entity->ltitp_consumer_entity_key,
  );
  $entity->content['ltitp_consumer_entity_secret'] = array(
    '#type' => 'item',
    '#title' => t('Secret'),
    '#markup' => $entity->ltitp_consumer_entity_secret,
  );
  $entity->content['ltitp_consumer_entity_domain'] = array(
    '#type' => 'item',
    '#title' => t('Domain'),
    '#markup' => $entity->ltitp_consumer_entity_domain,
  );
  $entity_type = 'ltitp_consumer_entity';
  $extra_cols = getExtraColumns($entity_type);
  if (isset($extra_cols)) {
    foreach ($extra_cols as $col) {
      if (!isset($entity->$col)) {
        $value = 'Not avaliable';
      }
      else {
        $value = $entity->$col;
      }
      $entity->content[$col] = array(
        '#type' => 'item',
        '#title' => t(getColumnDesc($entity_type, $col)),
        '#markup' => $value,
      );
    }
  }
  $entity->content['ltitp_consumer_entity_dummy_pref'] = array(
    '#type' => 'item',
    '#title' => t('Activate Dummy Account'),
    '#markup' => trans_bool($entity->ltitp_consumer_entity_dummy_pref),
  );
  $entity->content['date_joined'] = array(
    '#type' => 'item',
    '#title' => t('Date Joined'),
    '#markup' => format_date($entity->date_joined),
  );
  global $language ;
  $langcode = $language->language ;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
  $langcode);
  drupal_alter(array('ltitp_consumer_entity_view', 'entity_view'),
  $entity->content, $entity_type);
  return $entity->content;
}

function ltitp_consumer_entity_admin_page() {
  $content = array();
  $content[] = array(
    '#type' => 'item',
    '#markup' => t('Administration page for LTI Tool Consumers.'),
  );
  $content[] = array(
    '#type' => 'item',
    '#markup' => l(t('Add a new LTI Tool Consumer'), 'admin/config/lti-tool-provider/lti-tool-consumers/add'),
  );
  $content['table'] = ltitp_consumer_entity_list_entities();
  return $content;
}
