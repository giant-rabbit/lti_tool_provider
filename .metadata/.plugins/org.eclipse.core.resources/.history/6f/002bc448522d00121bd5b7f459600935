<?php

/**
 * @file
 * Contains all related outcomes resource entity functions.
 * Entity views are found here.
 */

/**
 * Add a Resource.
 *
 * @return array
 *   Resource Add Form
 */
function lti_tool_provider_outcomes_resource_add() {
  $entity = entity_get_controller('lti_tool_provider_outcomes_resource')->create();
  return drupal_get_form('lti_tool_provider_outcomes_resource_form', $entity);
}

/**
 * Save a Resource.
 *
 * @param object $entity
 *   Resource entity
 */
function lti_tool_provider_outcomes_resource_save(&$entity) {
  return entity_get_controller('lti_tool_provider_outcomes_resource')->save($entity);
}

/**
 * Delete A Resource.
 *
 * @param object $entity
 *   Resource entity
 */
function lti_tool_provider_outcomes_resource_delete($entity) {
  entity_get_controller('lti_tool_provider_outcomes_resource')->delete($entity);
}

/**
 * Get the URL to view a Outcome record.
 *
 * @param object $resource
 *   Resource entity
 * @return array
 *   URI array
 */
function lti_tool_provider_outcomes_resource_uri($resource) {
  return array(
    'path' => 'admin/config/lti-tool-provider/outcomes-resource/view/' . $resource->id, 
  );
}

/**
 * Retrieve all Resource Entities.
 *
 * @return array
 *   Array for constructing the form
 */
function lti_tool_provider_outcomes_resource_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = lti_tool_provider_outcomes_resource_load_multiple();
  if (!empty($entities)) {
    $serial = 1;
    foreach ( $entities as $entity ) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'No' => $serial, 
          'Resource Title' => l($entity->lti_tool_provider_outcomes_resource_resource_link_title, 'ltitp-outcomes-resource/view/' . $entity->lti_tool_provider_outcomes_resource_id),
          'Consumer' => lti_tool_provider_consumer_load($entity -> lti_tool_provider_outcomes_resource_consumer_id)->lti_tool_provider_consumer_consumer,
          'Context ID' => $entity -> lti_tool_provider_outcomes_resource_context_id,
          'Score Datatype' => isset($entity->lti_tool_provider_outcomes_resource_score_datatype) ? $entity->lti_tool_provider_outcomes_resource_score_datatype : 'Datatype not selected', 
          'Date Joined' => format_date($entity->lti_tool_provider_outcomes_resource_timestamp_created), 
          'Last updated' => isset($entity -> lti_tool_provider_outcomes_resource_timestamp_last_updated) ? format_date($entity -> lti_tool_provider_outcomes_resource_timestamp_last_updated) : 'Yet to be updated', 
        ), 
      );
      $serial++;
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table', 
      '#rows' => $rows, 
      '#header' => array(t('No'), t('Resource Title'), t('Consumer'), t('Context ID'), t('Score Data-type'), t('Date Created'), t('Last Updated')), 
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item', 
      '#markup' => t('No LTITP Outcomes Resource entities currently exist.'), 
    );
  }
  return $content;
}

/**
 * Load a Resource Entity.
 *
 * @param int $id
 *   Resource entity id
 * @param boolean $reset
 *   Boolean for reset option
 * @return object
 *   Resource entity
 */
function lti_tool_provider_outcomes_resource_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $obj = lti_tool_provider_outcomes_resource_load_multiple($ids, $reset);
  return $obj ? reset($obj) : FALSE;
}

/**
 * Load mutiple Resource Entities.
 *
 * @param int $ids
 *   Array of ids
 * @param array $conditions
 *   Conditions for loading
 * @param boolean $reset
 *   Boolean for reset option
 * @return array
 *   Array of resource entities
 */
function lti_tool_provider_outcomes_resource_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('lti_tool_provider_outcomes_resource', $ids, $conditions, $reset);
}

/**
 * View a single resource entity.
 *
 * @param object $entity
 *   Resource entity
 * @param string $view_mode
 *   String option for view mode
 * @return array
 *   The content array from the entity
 */
function lti_tool_provider_outcomes_resource_view($entity, $view_mode = 'tweaky') {
  $entity_type = 'lti_tool_provider_outcomes_resource';
  $entity->content = array(
    '#view_mode' => $view_mode, 
  );
  field_attach_prepare_view($entity_type, array($entity->lti_tool_provider_outcomes_resource_id => $entity), 
    $view_mode);
  entity_prepare_view($entity_type, array($entity->lti_tool_provider_outcomes_resource_id => $entity));
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);
  $entity->content['lti_tool_provider_outcomes_resource_id'] = array(
    '#type' => 'item', 
    '#title' => t('ID'), 
    '#markup' => $entity->lti_tool_provider_outcomes_resource_id, 
  );
  $consumer = lti_tool_provider_outcomes_get_consumer_by_id($entity->lti_tool_provider_outcomes_resource_consumer_id) ;
  $entity->content['lti_tool_provider_outcomes_resource_consumer_id'] = array(
    '#type' => 'item', 
    '#title' => t('Consumer'), 
    '#markup' => isset($consumer) ? $consumer -> lti_tool_provider_consumer_consumer : 'Not avaliable', 
  );
  $entity->content['lti_tool_provider_outcomes_resource_resource_link_id'] = array(
    '#type' => 'item', 
    '#title' => t('Resource ID'), 
    '#markup' => $entity->lti_tool_provider_outcomes_resource_resource_link_id, 
  );
  $entity->content['lti_tool_provider_outcomes_resource_resource_link_title'] = array(
    '#type' => 'item', 
    '#title' => t('Resource Title'), 
    '#markup' => $entity->lti_tool_provider_outcomes_resource_resource_link_title, 
  );
  $entity->content['lti_tool_provider_outcomes_resource_context_id'] = array(
    '#type' => 'item',
    '#title' => t('Context ID'),
    '#markup' => $entity->lti_tool_provider_outcomes_resource_context_id,
  );
  $entity->content['lti_tool_provider_outcomes_resource_resultvalue_sourcedids'] = array(
    '#type' => 'item', 
    '#title' => t('Result Value SourceDIDs'), 
    '#markup' => $entity -> lti_tool_provider_outcomes_resource_resultvalue_sourcedids, 
  );
  $entity->content['lti_tool_provider_outcomes_resource_score_datatype'] = array(
    '#type' => 'item', 
    '#title' => t('Preferred Datatype'), 
    '#markup' => isset($entity->lti_tool_provider_outcomes_resource_score_datatype) ? $entity->lti_tool_provider_outcomes_resource_score_datatype : 'Yet to be set', 
  );
  $entity->content['lti_tool_provider_outcomes_resource_timestamp_created'] = array(
    '#type' => 'item', 
    '#title' => t('Date Joined'), 
    '#markup' => format_date($entity->lti_tool_provider_outcomes_resource_timestamp_created), 
  );
  $entity->content['lti_tool_provider_outcomes_resource_timestamp_last_updated'] = array(
    '#type' => 'item', 
    '#title' => t('Date Updated'), 
    '#markup' => isset($entity->lti_tool_provider_outcomes_resource_timestamp_last_updated) ? format_date($entity->lti_tool_provider_outcomes_resource_timestamp_last_updated) : 'Yet to be updated', 
  );
  global $language ;
  $langcode = $language->language ;
  $entity->content['#language'] = $langcode;
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode, 
    $langcode);
  drupal_alter(array('lti_tool_provider_outcomes_resource_view', 'entity_view'), 
    $entity->content, $entity_type);
  return $entity->content;
}

/**
 * Manage Resource Page.
 *
 * @return array
 *   The content array of the display
 */
function lti_tool_provider_outcomes_resource_info_page() {
  $content['preface'] = array(
    '#type' => 'item', 
    '#markup' => t('LTITP Outcomes Resource Entity Adminstration.')
  );
  if (user_access('administer ltitp_outcomes_module')) {
    $content['preface']['#markup'] =  t('Add a new LTI Tool Outcomes Resource !link.', 
      array('!link' => l(t('here'), 'ltitp-outcomes-resource/add'))
    );
  }
  $content['table'] = lti_tool_provider_outcomes_resource_list_entities();
  return $content;
}

/**
 * Adminstrater Resources.
 *
 * @return array
 *   The content array of the display
 */
function lti_tool_provider_outcomes_resource_admin_page() {
  $content = array();
  $content[] = array(
    '#type' => 'item', 
    '#markup' => t('Administration page for LTI Tool Outcomes Resource.'), 
  );
  $content[] = array(
    '#type' => 'item', 
    '#markup' => l(t('Add a new LTI Tool Outcomes Resource'), 'admin/config/lti-tool-provider/ltitp-outcomes-resource/add'), 
  );
  $content['table'] = lti_tool_provider_outcomes_resource_list_entities();
  return $content;
}

/**
 * Resource Record Form.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 * @param object $entity
 *   Resource entity
 * @return array
 *   The form content
 */
function lti_tool_provider_outcomes_resource_form($form, &$form_state, $entity) {
  if ( isset($entity->lti_tool_provider_outcomes_resource_consumer_id) ) {
    $consumer = lti_tool_provider_outcomes_get_consumer_by_id($entity->lti_tool_provider_outcomes_resource_consumer_id) ;
  }
  $form['lti_tool_provider_outcomes_resource_consumer_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Consumer'),
    '#required' => TRUE,
    '#default_value' => isset($consumer) ? $consumer -> lti_tool_provider_consumer_consumer : NULL,
  );
  $form['lti_tool_provider_outcomes_resource_resource_link_title'] = array(
    '#type' => 'textfield', 
    '#title' => t('Resource Title'), 
    '#required' => TRUE, 
    '#default_value' => $entity->lti_tool_provider_outcomes_resource_resource_link_title, 
  );
  $form['lti_tool_provider_outcomes_resource_context_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Context ID'),
    '#required' => TRUE,
    '#default_value' => $entity->lti_tool_provider_outcomes_resource_context_id,
  );
  $form['lti_tool_provider_outcomes_resource_resource_link_id'] = array(
    '#type' => 'textfield', 
    '#title' => t('Result Title ID'), 
    '#required' => TRUE, 
    '#default_value' => $entity->lti_tool_provider_outcomes_resource_resource_link_id, 
  );
  $form['lti_tool_provider_outcomes_resource_resultvalue_sourcedids'] = array(
    '#type' => 'textfield', 
    '#title' => t('Result Value Source DIDs'), 
    '#required' => TRUE, 
    '#default_value' => $entity->lti_tool_provider_outcomes_resource_resultvalue_sourcedids, 
  );
  $form['lti_tool_provider_outcomes_resource_score_datatype'] = array(
    '#type' => 'textfield', 
    '#title' => t('Score Datatype'), 
    '#required' => TRUE, 
    '#default_value' => $entity->lti_tool_provider_outcomes_resource_score_datatype, 
  );
  $form['lti_tool_provider_outcomes_resource_id'] = array(
    '#type' => 'value', 
    '#value' => $entity->lti_tool_provider_outcomes_resource_id, 
  );
  $form['lti_tool_provider_outcomes_resource'] = array(
    '#type' => 'value', 
    '#value' => $entity, 
  );
  field_attach_form('lti_tool_provider_outcomes_resource', $entity, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit', 
    '#value' => t('Save'), 
    '#weight' => 100, 
  );
  // Ensure the delete button do not appear on the add page
  if (current_path() != "admin/config/lti-tool-provider/outcomes-resource/add") {
    $form['delete'] = array(
      '#type' => 'submit', 
      '#value' => t('Delete'), 
//       '#submit' => array('lti_tool_provider_outcomes_resource_edit_delete'), 
      '#weight' => 200, 
    );
  }
  return $form;
}

/**
 * Validate callback for the resource form.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 */
function lti_tool_provider_outcomes_resource_form_validate($form, &$form_state) {
  //  ltitp-outcomes-resource/view/%lti_tool_provider_outcomes_resource/edit/confirm_delete
  //  Do some validatation.
  if (($form_state['clicked_button']['#value'] == 'Delete')) {
    drupal_goto(current_path() . '/confirm_delete');
  }
  $src_dids_arr = explode(',', $form_state['values']['lti_tool_provider_outcomes_resource_resultvalue_sourcedids']);
  $check = FALSE;
  foreach ($src_dids_arr as $str) {
    if (strcasecmp($str, $form_state['values']['lti_tool_provider_outcomes_resource_score_datatype']) == 0) {
      $check = TRUE;
      break;
    }
  }
  $consumer_name_check = FALSE;
  $consumer_name_check = lti_tool_provider_outcomes_validate_consumer_name($form_state['values']['lti_tool_provider_outcomes_resource_consumer_name']);
  if (!$check) {
    form_set_error('', t('Score datatype must be one of the value contain in Result Value Source DIDs.'));
  }
  elseif (!$consumer_name_check) {
    form_set_error('', t('Consumer name do not match. Please enter a valid consumer name'));
  }
}

/**
 * Submit handler for the Resource form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function lti_tool_provider_outcomes_resource_form_submit($form, &$form_state) {
  $entity = $form_state['values']['lti_tool_provider_outcomes_resource'];
  $entity->lti_tool_provider_outcomes_resource_resource_link_title = $form_state['values']['lti_tool_provider_outcomes_resource_resource_link_title'];
  $entity->lti_tool_provider_outcomes_resource_resource_link_id = $form_state['values']['lti_tool_provider_outcomes_resource_resource_link_id'];
  $entity->lti_tool_provider_outcomes_resource_resultvalue_sourcedids = $form_state['values']['lti_tool_provider_outcomes_resource_resultvalue_sourcedids'];
  $entity->lti_tool_provider_outcomes_resource_score_datatype = $form_state['values']['lti_tool_provider_outcomes_resource_score_datatype'];
  $entity->lti_tool_provider_outcomes_resource_context_id = $form_state['values']['lti_tool_provider_outcomes_resource_context_id'];
  $consumer = lti_tool_provider_outcomes_get_consumer_by_name($form_state['values']['lti_tool_provider_outcomes_resource_consumer_name']);
  $entity->lti_tool_provider_outcomes_resource_consumer_id = $consumer -> lti_tool_provider_consumer_id;
  field_attach_submit('lti_tool_provider_outcomes', $entity, $form, $form_state);
  $entity = lti_tool_provider_outcomes_resource_save($entity);
  drupal_set_message(t('Configurations saved'));
  $form_state['redirect'] = 'admin/config/lti-tool-provider/outcomes-resource/manage';
}

/**
 * Confirms the delete action
 *
 * @param array $form_state
 *   Form state array
 * @return array
 *   Confirm form array
 */
function lti_tool_provider_outcomes_confirm_delete_form($form, &$form_state, $resource) {
  $form['resource_delete'] = array(
    '#type' => 'value',
    '#value' => $resource,
  );
  $affected_outcomes = lti_tool_provider_outcomes_get_affected_outcomes($resource);
  $form['affected_outcomes'] = array(
    '#type' => 'value',
    '#value' => $affected_outcomes,
  );
  return confirm_form($form,
    t('Are you sure you want to delete this resource record?'),
    'lti-tool-provider-outcomes/resource',
    t('This action cannot be undone. <br/><b>:X</b> outcomes record(s) will be removed', array(':X' => isset($affected_outcomes) ? count($affected_outcomes) : 0)),
    t('Delete'),
    t('Cancel'));
}

/**
 * Submit handler for the Resource form delete.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 */
function lti_tool_provider_outcomes_confirm_delete_form_submit($form, &$form_state) {
  $entity = $form_state['values']['resource_delete'];
  $affected_outcomes = lti_tool_provider_outcomes_get_affected_outcomes($form_state['values']['resource_delete']);
  if (isset($affected_outcomes)) {
    foreach ($affected_outcomes as $outcome) {
      lti_tool_provider_outcomes_delete($outcome);
    }
  }
  lti_tool_provider_outcomes_resource_delete($entity);
  drupal_set_message(t('The entity :(ID %lti_tool_provider_outcomes_resource_id) has been deleted. <b>%NO</b> outcomes record(s) has been removed as well', array(
    '%lti_tool_provider_outcomes_resource_id' => $entity->lti_tool_provider_outcomes_resource_id,
    '%NO' => isset($affected_outcomes) ? count($affected_outcomes) : 0,
    )));
  $form_state['redirect'] = 'lti-tool-provider-outcomes/resource';
}

/**
 * Form to manage outcomes.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 *
 * @return array
 *   The form array.
 */
function lti_tool_provider_outcomes_resource_manage_form($form, &$form_state) {
  $consumer = lti_tool_provider_get_consumer_by_key($_SESSION['lti_tool_provider_context_info']['oauth_consumer_key']);
  $records = lti_tool_provider_outcomes_retrieves_resource_records_by_context($consumer -> lti_tool_provider_consumer_id, $_SESSION['lti_tool_provider_context_info']['context_id']);
  $form = array();
  $form['title'] = array(
    '#type' => 'item',
    '#markup' => t('Consumer : <b>' . $consumer-> lti_tool_provider_consumer_consumer . '</b>'),
  );
  $form['context'] = array(
    '#type' => 'item',
    '#markup' => t('Resource records for context : <b>' . $_SESSION['lti_tool_provider_context_info']['context_id'] . '</b>'),
  );
  $form['records'] = array(
    '#type' => 'value',
    '#value' => $records,
  );
  $rows = 1;
  foreach ($records as $record) {
    $form['row_' . $rows][$record -> lti_tool_provider_outcomes_resource_id . '_entity'] = array(
      '#type' => 'value',
      '#value' => $record,
    );
    $form['row_' . $rows][$record -> lti_tool_provider_outcomes_resource_id . '_title'] = array(
      '#type' => 'item',
      '#markup' => t($record -> lti_tool_provider_outcomes_resource_resource_link_title),
    );
    $datatype_arr = lti_tool_provider_outcomes_datatype_array($record->lti_tool_provider_outcomes_resource_resultvalue_sourcedids);
    $def_value = array_search($record->lti_tool_provider_outcomes_resource_score_datatype, $datatype_arr);
    $form['row_' . $rows][$record -> lti_tool_provider_outcomes_resource_id . '_datatype_select'] = array(
      '#type' => 'select',
      '#options'  => $datatype_arr,
      '#default_value' => $def_value,
    );
    $form['row_' . $rows][$record -> lti_tool_provider_outcomes_resource_id . '_data_created'] = array(
      '#type' => 'item',
      '#markup' => t(format_date($record -> lti_tool_provider_outcomes_resource_timestamp_created)),
    );
    $form['row_' . $rows][$record -> lti_tool_provider_outcomes_resource_id . '_operations'] = array(
      '#type' => 'item',
      '#markup' =>l(t('Outcomes') , 'lti-tool-provider-outcomes/outcomes/by-resource/' . $record -> lti_tool_provider_outcomes_resource_id)
      . '&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp' .
      l(t('Delete') , 'lti-tool-provider-outcomes/resource/' . $record -> lti_tool_provider_outcomes_resource_id . '_/confirm_delete') ,
    );
    $rows ++;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#submit' => array('lti_tool_provider_outcomes_resource_manage_form_submit'),
  );
  $form['#theme'] = array('lti_tool_provider_outcomes_resource_manage_form');
  return $form;
}
/**
 * Theme for Grades Mapping Form.
 *
 * @param array $variables
 *   Theme variables
 *
 * @return array
 *   Themed Form
 */
function theme_lti_tool_provider_outcomes_resource_manage_form($variables) {
  $form = $variables['form'];
  $output = '';
  $output .= drupal_render($form['title']);
  $output .= drupal_render($form['context']);
  $records = $form['records']['#value'];
  $counter = 1;
  $rows = array();
  foreach ($records as $record) {
    $rows[] = array(
      array('data' => $counter ),
      array('data' => drupal_render($form['row_' . $counter][$record -> lti_tool_provider_outcomes_resource_id . '_title'])),
      array('data' => drupal_render($form['row_' . $counter][$record -> lti_tool_provider_outcomes_resource_id . '_datatype_select']) ),
      array('data' => drupal_render($form['row_' . $counter][$record -> lti_tool_provider_outcomes_resource_id . '_data_created']) ),
      array('data' => drupal_render($form['row_' . $counter][$record -> lti_tool_provider_outcomes_resource_id . '_operations']) ),
      );
    $counter ++;
  }
  $header = array(
    t('No'),
    t('Resource Title'),
    t('Score Datatype'),
    t('Date Created'),
    t('Operations'),
    );
  $output .= theme('table', array('header' => $header, 'rows' => $rows));
  $output .= drupal_render_children($form);
  return $output;
}
/**
 * Submit handler for the Resource form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function lti_tool_provider_outcomes_resource_manage_form_validate($form, &$form_state) {
}
/**
 * Submit handler for the Resource form.
 *
 * @param array $form
 *   Form array.
 * @param array $form_state
 *   Form state array.
 */
function lti_tool_provider_outcomes_resource_manage_form_submit($form, &$form_state) {
  $records = $form_state['values']['records'];
  // A string of resource id separated by ','
  $changed_ids = '';
  // A string of index selected on the datatype
  $selected_datatype ='';
  foreach ($records as $record) {
    $chosen_value = $form_state['values'][$record -> lti_tool_provider_outcomes_resource_id . '_datatype_select'];
    $datatype_arr = lti_tool_provider_outcomes_datatype_array($record->lti_tool_provider_outcomes_resource_resultvalue_sourcedids);
    $ori_entity =   $form_state['values'][$record -> lti_tool_provider_outcomes_resource_id . '_entity'];
    if (!($ori_entity -> lti_tool_provider_outcomes_resource_score_datatype == $datatype_arr[$chosen_value])) {
      $changed_ids .= $record -> lti_tool_provider_outcomes_resource_id . ',';
      $selected_datatype .= $chosen_value . ',';
    }
  }
  if (drupal_strlen($changed_ids) > 0 && drupal_strlen($selected_datatype) > 0) {
    $new_changed_ids = drupal_substr($changed_ids, 0, -1);
    $new_selected_datatype = drupal_substr($selected_datatype, 0, -1);
    $params_arr = array();
    $params_arr['ids'] = $new_changed_ids;
    $params_arr['datatypes'] = $new_selected_datatype;
    $params_arr['return_url'] = 'lti-tool-provider-outcomes/resource';
    $form_state['redirect'] = array(
      'lti-tool-provider-outcomes/resource/grades-mapping/confirm_change',
      array(
        'query' => $params_arr
        )
      );
  }
  else {
    drupal_set_message(t('Nothing has changed'));
  }
}
function lti_tool_provider_outcomes_resource_confirm_change_form($form, &$form_state) {
  $ids = $_GET['ids'];
  $datatype_selection = $_GET['datatypes'];
  $message = 'This action cannot be undone. <br/>';
  $ids_array = explode(',',  $ids);
  $datatype_selected_array = explode(',',  $datatype_selection);
  $counter = 0;
  $affected_resource = array();
  foreach ($ids_array as $id) {
    $resource = lti_tool_provider_outcomes_resource_load($id);
    $affected_outcomes = lti_tool_provider_outcomes_get_affected_outcomes($resource);
    $datatype_arr = lti_tool_provider_outcomes_datatype_array($resource -> lti_tool_provider_outcomes_resource_resultvalue_sourcedids);
    $selected_datatype = $datatype_arr[$datatype_selected_array[$counter]];
    $counter++;
    $str = 'Changing resource <b>' . $resource -> lti_tool_provider_outcomes_resource_resource_link_title . '</b> datatype to <b>' . $selected_datatype . '</b> will affect <b>' . (isset($affected_outcomes) ? count($affected_outcomes) : 0) . '</b> of outcomes record(s)! </br><br/>';
    $message .= $str;
    $form['row_' . $counter][$resource -> lti_tool_provider_outcomes_resource_id . '_selected_datatype'] = array(
      '#type' => 'value',
      '#value' => $selected_datatype,
    );
    $form['row_' . $counter][$resource -> lti_tool_provider_outcomes_resource_id . '_affected_outcomes'] = array(
      '#type' => 'value',
      '#value' => $affected_outcomes,
    );
    $affected_resource[] = $resource;
  }
  $form['affected_resource'] = array(
    '#type' => 'value',
    '#value' => $affected_resource,
  );
  $form['return_url'] = array(
    '#type' => 'value',
    '#value' => isset($_GET['return_url']) ? $_GET['return_url'] : '',
  );
  return confirm_form($form,
    t('Are you sure you want to make changes to the resource record(s)?'),
    'lti-tool-provider-outcomes/resource',
    t($message),
    t('Change'),
    t('Cancel'));
}
function lti_tool_provider_outcomes_resource_confirm_change_form_submit($form, &$form_state) {
  $affected_resource = $form_state['values']['affected_resource'];
  foreach ($affected_resource as $resource) {
    $datatype = $form_state['values'][$resource -> lti_tool_provider_outcomes_resource_id . '_selected_datatype'];
    $affected_outcomes = $form_state['values'][$resource -> lti_tool_provider_outcomes_resource_id . '_affected_outcomes'];
    // set all affected outcomes score to zero
    foreach ($affected_outcomes as $outcome) {
      $outcome -> lti_tool_provider_outcomes_score = lti_tool_provider_outcomes_get_datatype_default_value($datatype);
      $outcome -> lti_tool_provider_outcomes_last_updated = NULL;
      lti_tool_provider_outcomes_save($outcome);
    }
    $resource -> lti_tool_provider_outcomes_resource_score_datatype = $datatype;
    $resource -> lti_tool_provider_outcomes_resource_timestamp_last_updated = REQUEST_TIME;
    lti_tool_provider_outcomes_resource_save($resource);
  }
  drupal_set_message(t('Configurations saved'));
  $form_state['redirect'] = $form_state['values']['return_url'];
}