<?php
/**
 * @file
 * Entity for outcomes. Contains all related outcomes entity functions.
 * Entity views are found here
 */

/**
 * Save an Outcome.
 *
 * @param object $entity
 *   Outcome entity
 */
function lti_tool_provider_outcomes_save(&$entity) {
  return entity_get_controller('lti_tool_provider_outcomes')->save($entity);
}

/**
 * Delete an Outcome.
 *
 * @param object $entity
 *   Outcome entity
 */
function lti_tool_provider_outcomes_delete($entity) {
  entity_get_controller('lti_tool_provider_outcomes')->delete($entity);
}

/**
 * Get the url to view a Outcome record.
 *
 * @param object $outcome
 *   Outcome entity
 * @return array
 *   Uri array
 * */
function lti_tool_provider_outcomes_uri($outcome) {
  return array(
    'path' => 'ltitp-outcomes/view/' . $outcome->id ,
  );
}


/**
 * Load Outcome Entities.
 *
 * @param int $id
 *   Outcomes record ids
 * @param boolean $reset
 *   Boolean option for reset
 * @return object
 *   The outcomes object.
 */
function lti_tool_provider_outcomes_load($id = NULL , $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $obj = lti_tool_provider_outcomes_load_multiple($ids , $reset);
  return $obj ? reset($obj) : FALSE;
}

/**
 * Load mutiple Outcomes Entities.
 *
 * @param int $ids
 *   Outcomes entities ids
 * @param array $conditions
 *   Array of conditions
 * @param boolean $reset
 *   Boolean option for reset
 * @return array
 *   An array of outcomes objects.
 */
function lti_tool_provider_outcomes_load_multiple($ids = FALSE , $conditions = array() , $reset = FALSE) {
  return entity_load('lti_tool_provider_outcomes' , $ids , $conditions , $reset);
}

/**
 * Implements hook_rules_action_info().
 */
function lti_tool_provider_outcomes_rules_action_info() {
  $actions['outcomes_set_score'] =  array(
    'label' => t('Set user score'),
    'named parameter' => TRUE,
    'base' => 'lti_tool_provider_outcomes_set_score_action',
    'group' => t('Outcomes'),
    'parameter' => array(
      'score' => array(
        'type' => 'decimal',
        'label' => t('Score'),
        'description' => t('The score of the current user'),
      ),
    ),
  );
  $actions['outcomes_pull_score'] =  array(
    'label' => t('Retreives current user score'),
    'base' => 'lti_tool_provider_outcomes_pull_score_action',
    'group' => t('Outcomes'),
  );
  return $actions;
}

/**
 * Action: Set the user's score.
 *
 * @param array $params
 *   Array of parameters
 */
function lti_tool_provider_outcomes_set_score_action($params) {
  lti_tool_provider_outcomes_set_score($params['score']);
}

/**
 * Action: Pull the user's score.
 */
function lti_tool_provider_outcomes_pull_score_action() {
  lti_tool_provider_outcomes_pull_results('', 0);
}

/**
 * Removes all Outcomes record via the user id.
 *
 * This function is invoked when the hook_user_delete is called.
 * This is to remove all user related Outcomes content.
 *
 * @param int $uid
 *   User entity uid
 */
function lti_tool_provider_outcomes_remove_all_outcomes_by_user($uid) {
  $results_arr = array();
  $query =new EntityFieldQuery();
  $query
  ->entityCondition('entity_type',  'lti_tool_provider_outcomes')
  ->propertyCondition('lti_tool_provider_outcomes_user_id',  $uid);
  $result = $query->execute();
  $entity_type = 'lti_tool_provider_outcomes';
  if (!empty($result[$entity_type])) {
    $outcomes = entity_load($entity_type,  array_keys($result[$entity_type]));
    entity_get_controller($entity_type)->delete_multiple($outcomes);
    drupal_set_message(check_plain(t('Outcomes record related to user:[' . $uid . '] has been removed')));
  }
}


/**
 * Submit handler for the outcomes form.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 */
function lti_tool_provider_outcomes_outcomes_manage_form_validate(&$form, &$form_state) {
  // Ignore the validation for now.
  $resource = $form_state['values']['resource'];
  $outcomes = $form_state['values']['outcomes'];
  $base_no = $resource -> lti_tool_provider_outcomes_resource_score_datatype_base_value;
  $counter = 1;
  $row_no = 0;
  foreach ($outcomes as $outcome) {
    $score = lti_tool_provider_outcomes_format_score($row_no, $form_state , $outcome , $resource -> lti_tool_provider_outcomes_resource_score_datatype, $base_no);
//     if (!lti_tool_provider_outcomes_validate_score($resource -> lti_tool_provider_outcomes_resource_score_datatype, $score)) {
//       form_set_error('' , check_plain(t('Row Number : ' . $counter . ' has an error. The score must be of appropriate format of DATATYPE:' . $resource -> lti_tool_provider_outcomes_resource_score_datatype)));
//     }
//     else {
      $form_state['values'][$outcome -> lti_tool_provider_outcomes_id . '_formatted_score'] = $score;
//     }
    $row_no ++;
    $counter ++;
  }
  dpm($form, 'form at validation');
  dpm($form_state, 'form_state at validation');
}

/**
 * Submit handler for the outcomes form.
 *
 * @param array $form
 *   Form array
 * @param array $form_state
 *   Form state array
 */
function lti_tool_provider_outcomes_outcomes_manage_form_submit($form , &$form_state) {
  $outcomes = $form_state['values']['outcomes'];
  dpm($outcomes);
  foreach ($outcomes as $outcome) {
    $outcome -> lti_tool_provider_outcomes_score = $form_state['values'][$outcome -> lti_tool_provider_outcomes_id . '_formatted_score'];
    $outcome -> lti_tool_provider_outcomes_last_updated = REQUEST_TIME;
    lti_tool_provider_outcomes_save($outcome);
  }
  drupal_set_message(t('Configurations saved'));
  $form_state['redirect'] = current_path();
}

/**
 * Cancel button return for outcomes manage form.
 *
 * @param array $form
 *   The form array.
 * @param array $form_state
 *   The form state array.
 */
function lti_tool_provider_outcomes_outcomes_manage_form_cancel($form , &$form_state) {
  drupal_goto('lti-tool-provider-outcomes/resource');
}